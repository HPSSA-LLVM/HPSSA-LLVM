SCCP on function '__cxx_global_var_init'
Marking Block Executable: entry

Popped off BBWL: 
entry:
  call void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"* nonnull align 1 dereferenceable(1) @_ZStL8__ioinit)
  %i = call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev to void (i8*)*), i8* getelementptr inbounds (%"class.std::ios_base::Init", %"class.std::ios_base::Init"* @_ZStL8__ioinit, i32 0, i32 0), i8* @__dso_handle) #3
  ret void

Merged overdefined into   %i = call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev to void (i8*)*), i8* getelementptr inbounds (%"class.std::ios_base::Init", %"class.std::ios_base::Init"* @_ZStL8__ioinit, i32 0, i32 0), i8* @__dso_handle) #3 : overdefined

Popped off OI-WL:   %i = call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev to void (i8*)*), i8* getelementptr inbounds (%"class.std::ios_base::Init", %"class.std::ios_base::Init"* @_ZStL8__ioinit, i32 0, i32 0), i8* @__dso_handle) #3
RESOLVING UNDEFs
SCCP on function 'main'
Marking Block Executable: entry

Popped off BBWL: 
entry:
  br label %start

Marking Block Executable: start

Popped off BBWL: 
start:                                            ; preds = %entry
  switch i32 undef, label %sw.default [
    i32 2, label %sw.bb
    i32 4, label %sw.bb1
  ]

RESOLVING UNDEFs
Marking Block Executable: sw.bb

Popped off BBWL: 
sw.bb:                                            ; preds = %start
  br label %label_3

Marking Block Executable: label_3

Popped off BBWL: 
label_3:                                          ; preds = %sw.bb
  %add = add nsw i32 50, 50
  %add2 = add nsw i32 %add, 90
  br label %label_7

Merged constantrange<100, 101> into   %add = add nsw i32 50, 50 : constantrange<100, 101>
Merged constantrange<190, 191> into   %add2 = add nsw i32 %add, 90 : constantrange<190, 191>
Marking Block Executable: label_7

Popped off BBWL: 
label_7:                                          ; preds = %label_4, %label_3
  %e.0 = phi i32 [ %add3, %label_4 ], [ 90, %label_3 ]
  %b.0 = phi i32 [ 90, %label_4 ], [ 50, %label_3 ]
  %a.0 = phi i32 [ 10, %label_4 ], [ 50, %label_3 ]
  %tau2 = call i32 (...) @llvm.tau.i32(i32 %a.0, i32 10)
  %tau1 = call i32 (...) @llvm.tau.i32(i32 %b.0, i32 90)
  %tau = call i32 (...) @llvm.tau.i32(i32 %e.0, i32 %add3)
  %add4 = add nsw i32 %tau2, %tau
  br label %end

Merged constantrange<90, 91> into   %e.0 = phi i32 [ %add3, %label_4 ], [ 90, %label_3 ] : constantrange<90, 91>
Merged constantrange<50, 51> into   %b.0 = phi i32 [ 90, %label_4 ], [ 50, %label_3 ] : constantrange<50, 51>
Merged constantrange<50, 51> into   %a.0 = phi i32 [ 10, %label_4 ], [ 50, %label_3 ] : constantrange<50, 51>
Merged overdefined into   %tau2 = call i32 (...) @llvm.tau.i32(i32 %a.0, i32 10) : overdefined
Merged overdefined into   %tau1 = call i32 (...) @llvm.tau.i32(i32 %b.0, i32 90) : overdefined
Merged overdefined into   %tau = call i32 (...) @llvm.tau.i32(i32 %e.0, i32 %add3) : overdefined
markOverdefined:   %add4 = add nsw i32 %tau2, %tau
Marking Block Executable: end

Popped off BBWL: 
end:                                              ; preds = %label_6, %label_7
  %e.1 = phi i32 [ %sub, %label_6 ], [ 90, %label_7 ]
  %b.1 = phi i32 [ 77, %label_6 ], [ %tau1, %label_7 ]
  %a.1 = phi i32 [ 23, %label_6 ], [ %tau2, %label_7 ]
  %add6 = add nsw i32 %a.1, %b.1
  %cmp = icmp sge i32 %e.1, 150
  br i1 %cmp, label %if.then, label %if.else

Merged constantrange<90, 91> into   %e.1 = phi i32 [ %sub, %label_6 ], [ 90, %label_7 ] : constantrange<90, 91>
Merged overdefined into   %b.1 = phi i32 [ 77, %label_6 ], [ %tau1, %label_7 ] : overdefined
Merged overdefined into   %a.1 = phi i32 [ 23, %label_6 ], [ %tau2, %label_7 ] : overdefined
markOverdefined:   %add6 = add nsw i32 %a.1, %b.1
Merged constantrange<0, -1> into   %cmp = icmp sge i32 %e.1, 150 : constantrange<0, -1>
Marking Block Executable: if.else

Popped off BBWL: 
if.else:                                          ; preds = %end
  %tau7 = call i32 (...) @llvm.tau.i32(i32 %a.1, i32 %a.0)
  %tau5 = call i32 (...) @llvm.tau.i32(i32 %b.1, i32 %b.0)
  %tau3 = call i32 (...) @llvm.tau.i32(i32 %e.1, i32 90)
  %sub8 = sub nsw i32 %tau7, 100
  br label %if.end

Merged overdefined into   %tau7 = call i32 (...) @llvm.tau.i32(i32 %a.1, i32 %a.0) : overdefined
Merged overdefined into   %tau5 = call i32 (...) @llvm.tau.i32(i32 %b.1, i32 %b.0) : overdefined
Merged overdefined into   %tau3 = call i32 (...) @llvm.tau.i32(i32 %e.1, i32 90) : overdefined
Merged overdefined into   %sub8 = sub nsw i32 %tau7, 100 : overdefined
Marking Block Executable: if.end

Popped off BBWL: 
if.end:                                           ; preds = %if.else, %if.then
  %a.2 = phi i32 [ %add7, %if.then ], [ %sub8, %if.else ]
  %add9 = add nsw i32 %add6, %a.2
  ret i32 0

Merged overdefined into   %a.2 = phi i32 [ %add7, %if.then ], [ %sub8, %if.else ] : overdefined
markOverdefined:   %add9 = add nsw i32 %add6, %a.2

Popped off OI-WL:   %add9 = add nsw i32 %add6, %a.2

Popped off OI-WL:   %a.2 = phi i32 [ %add7, %if.then ], [ %sub8, %if.else ]

Popped off OI-WL:   %sub8 = sub nsw i32 %tau7, 100

Popped off OI-WL:   %tau3 = call i32 (...) @llvm.tau.i32(i32 %e.1, i32 90)

Popped off OI-WL:   %tau5 = call i32 (...) @llvm.tau.i32(i32 %b.1, i32 %b.0)

Popped off OI-WL:   %tau7 = call i32 (...) @llvm.tau.i32(i32 %a.1, i32 %a.0)

Popped off OI-WL:   %add6 = add nsw i32 %a.1, %b.1

Popped off OI-WL:   %a.1 = phi i32 [ 23, %label_6 ], [ %tau2, %label_7 ]

Popped off OI-WL:   %b.1 = phi i32 [ 77, %label_6 ], [ %tau1, %label_7 ]

Popped off OI-WL:   %add4 = add nsw i32 %tau2, %tau

Popped off OI-WL:   %tau = call i32 (...) @llvm.tau.i32(i32 %e.0, i32 %add3)

Popped off OI-WL:   %tau1 = call i32 (...) @llvm.tau.i32(i32 %b.0, i32 90)

Popped off OI-WL:   %tau2 = call i32 (...) @llvm.tau.i32(i32 %a.0, i32 10)

Popped off I-WL:   %cmp = icmp sge i32 %e.1, 150

Popped off I-WL:   %e.1 = phi i32 [ %sub, %label_6 ], [ 90, %label_7 ]

Popped off I-WL:   %a.0 = phi i32 [ 10, %label_4 ], [ 50, %label_3 ]

Popped off I-WL:   %b.0 = phi i32 [ 90, %label_4 ], [ 50, %label_3 ]

Popped off I-WL:   %e.0 = phi i32 [ %add3, %label_4 ], [ 90, %label_3 ]

Popped off I-WL:   %add2 = add nsw i32 %add, 90

Popped off I-WL:   %add = add nsw i32 50, 50
RESOLVING UNDEFs
  BasicBlock Dead:
sw.bb1:                                           ; preds = %start
  br label %label_4
  BasicBlock Dead:
sw.default:                                       ; preds = %start
  br label %label_6
  Constant: i32 100 =   %add = add nsw i32 50, 50
  Constant: i32 190 =   %add2 = add nsw i32 100, 90
  BasicBlock Dead:
label_4:                                          ; preds = %sw.bb1
  %add3 = add nsw i32 10, 80
  br label %label_7
  Constant: i32 90 =   %e.0 = phi i32 [ undef, %label_4 ], [ 90, %label_3 ]
  Constant: i32 50 =   %b.0 = phi i32 [ 90, %label_4 ], [ 50, %label_3 ]
  Constant: i32 50 =   %a.0 = phi i32 [ 10, %label_4 ], [ 50, %label_3 ]
  BasicBlock Dead:
label_6:                                          ; preds = %sw.default
  %add5 = add nsw i32 23, 77
  %sub = sub nsw i32 %add5, 10
  br label %end
  Constant: i32 90 =   %e.1 = phi i32 [ undef, %label_6 ], [ 90, %label_7 ]
  Constant: i1 false =   %cmp = icmp sge i32 90, 150
  BasicBlock Dead:
if.then:                                          ; preds = %end
  %tau8 = call i32 (...) @llvm.tau.i32(i32 %a.1, i32 23)
  %tau6 = call i32 (...) @llvm.tau.i32(i32 %b.1, i32 77)
  %tau4 = call i32 (...) @llvm.tau.i32(i32 90, i32 undef)
  %add7 = add nsw i32 %tau8, 190
  br label %if.end
SCCP on function '_GLOBAL__sub_I_test.cpp'
Marking Block Executable: entry

Popped off BBWL: 
entry:
  call void @__cxx_global_var_init()
  ret void

RESOLVING UNDEFs
===-------------------------------------------------------------------------===
                      ... Pass execution timing report ...
===-------------------------------------------------------------------------===
  Total Execution Time: 0.0105 seconds (0.0105 wall clock)

   ---User Time---   --System Time--   --User+System--   ---Wall Time---  --- Name ---
   0.0076 ( 74.4%)   0.0002 ( 92.0%)   0.0079 ( 74.9%)   0.0079 ( 74.9%)  SCCPPass
   0.0010 (  9.7%)   0.0000 (  0.0%)   0.0010 (  9.5%)   0.0010 (  9.5%)  VerifierPass
   0.0010 (  9.4%)   0.0000 (  0.0%)   0.0010 (  9.1%)   0.0010 (  9.1%)  VerifierAnalysis
   0.0006 (  5.8%)   0.0000 (  0.0%)   0.0006 (  5.7%)   0.0006 (  5.7%)  PrintModulePass
   0.0000 (  0.5%)   0.0000 (  6.8%)   0.0001 (  0.6%)   0.0001 (  0.6%)  PreservedCFGCheckerAnalysis
   0.0000 (  0.2%)   0.0000 (  1.1%)   0.0000 (  0.2%)   0.0000 (  0.2%)  TargetLibraryAnalysis
   0.0102 (100.0%)   0.0003 (100.0%)   0.0105 (100.0%)   0.0105 (100.0%)  Total

===-------------------------------------------------------------------------===
                                LLVM IR Parsing
===-------------------------------------------------------------------------===
  Total Execution Time: 0.0033 seconds (0.0033 wall clock)

   --System Time--   --User+System--   ---Wall Time---  --- Name ---
   0.0033 (100.0%)   0.0033 (100.0%)   0.0033 (100.0%)  Parse IR
   0.0033 (100.0%)   0.0033 (100.0%)   0.0033 (100.0%)  Total

