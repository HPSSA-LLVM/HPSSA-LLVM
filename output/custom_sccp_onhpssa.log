SCCP on function '__cxx_global_var_init'
Marking Block Executable: entry

Popped off BBWL: 
entry:
  call void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"* nonnull align 1 dereferenceable(1) @_ZStL8__ioinit)
  %i = call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev to void (i8*)*), i8* getelementptr inbounds (%"class.std::ios_base::Init", %"class.std::ios_base::Init"* @_ZStL8__ioinit, i32 0, i32 0), i8* @__dso_handle) #3
  ret void

Merged overdefined into   %i = call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev to void (i8*)*), i8* getelementptr inbounds (%"class.std::ios_base::Init", %"class.std::ios_base::Init"* @_ZStL8__ioinit, i32 0, i32 0), i8* @__dso_handle) #3 : overdefined

Popped off OI-WL:   %i = call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev to void (i8*)*), i8* getelementptr inbounds (%"class.std::ios_base::Init", %"class.std::ios_base::Init"* @_ZStL8__ioinit, i32 0, i32 0), i8* @__dso_handle) #3
RESOLVING UNDEFs
SCCP on function 'main'
Marking Block Executable: entry

Popped off BBWL: 
entry:
  %m = alloca i32, align 4
  %call = call nonnull align 8 dereferenceable(16) %"class.std::basic_istream"* @_ZNSirsERi(%"class.std::basic_istream"* nonnull align 8 dereferenceable(16) @_ZSt3cin, i32* nonnull align 4 dereferenceable(4) %m)
  %i = load i32, i32* %m, align 4
  switch i32 %i, label %sw.default [
    i32 2, label %sw.bb
    i32 4, label %sw.bb1
    i32 6, label %sw.bb4
  ]

SCCP: Don't know how to handle:   %m = alloca i32, align 4
markOverdefined:   %m = alloca i32, align 4
Merged overdefined into   %call = call nonnull align 8 dereferenceable(16) %"class.std::basic_istream"* @_ZNSirsERi(%"class.std::basic_istream"* nonnull align 8 dereferenceable(16) @_ZSt3cin, i32* nonnull align 4 dereferenceable(4) %m) : overdefined
Merged overdefined into   %i = load i32, i32* %m, align 4 : overdefined
Marking Block Executable: sw.default
Marking Block Executable: sw.bb
Marking Block Executable: sw.bb1
Marking Block Executable: sw.bb4

Popped off BBWL: 
sw.bb4:                                           ; preds = %entry
  %mul5 = mul nsw i32 2, 1
  %add6 = add nsw i32 %mul5, 1
  br label %sw.epilog

Merged constantrange<2, 3> into   %mul5 = mul nsw i32 2, 1 : constantrange<2, 3>
Merged constantrange<3, 4> into   %add6 = add nsw i32 %mul5, 1 : constantrange<3, 4>
Marking Block Executable: sw.epilog

Popped off BBWL: 
sw.epilog:                                        ; preds = %sw.default, %sw.bb4, %sw.bb1, %sw.bb
  %x.0 = phi i32 [ 2, %sw.default ], [ %add6, %sw.bb4 ], [ %add3, %sw.bb1 ], [ %add, %sw.bb ]
  %tau = call i32 (...) @llvm.tau.i32(i32 %x.0, i32 %add, i32 %add3, i32 %add6)
  %mul7 = mul nsw i32 2, %tau
  %add8 = add nsw i32 %mul7, 10
  %add9 = add nsw i32 9, %tau
  %cmp = icmp sle i32 %add8, %add9
  br i1 %cmp, label %if.end, label %if.else

Merged constantrange<3, 4> into   %x.0 = phi i32 [ 2, %sw.default ], [ %add6, %sw.bb4 ], [ %add3, %sw.bb1 ], [ %add, %sw.bb ] : constantrange<3, 4>
Merged overdefined into   %tau = call i32 (...) @llvm.tau.i32(i32 %x.0, i32 %add, i32 %add3, i32 %add6) : overdefined
Merged overdefined into   %mul7 = mul nsw i32 2, %tau : overdefined
Merged overdefined into   %add8 = add nsw i32 %mul7, 10 : overdefined
Merged overdefined into   %add9 = add nsw i32 9, %tau : overdefined
markOverdefined:   %cmp = icmp sle i32 %add8, %add9
Marking Block Executable: if.end
Marking Block Executable: if.else

Popped off BBWL: 
if.else:                                          ; preds = %sw.epilog
  %tau1 = call i32 (...) @llvm.tau.i32(i32 %tau, i32 %add3, i32 %add6)
  %mul10 = mul nsw i32 3, %tau1
  %add11 = add nsw i32 %add8, %mul10
  switch i32 %add11, label %if.end [
    i32 200, label %sw.bb13
    i32 300, label %sw.bb15
  ]

Merged overdefined into   %tau1 = call i32 (...) @llvm.tau.i32(i32 %tau, i32 %add3, i32 %add6) : overdefined
Merged overdefined into   %mul10 = mul nsw i32 3, %tau1 : overdefined
markOverdefined:   %add11 = add nsw i32 %add8, %mul10
Marking Edge Executable: if.else -> if.end
Marking Block Executable: sw.bb13
Marking Block Executable: sw.bb15

Popped off BBWL: 
sw.bb15:                                          ; preds = %if.else
  call void @exit(i32 0) #7
  unreachable


Popped off BBWL: 
sw.bb13:                                          ; preds = %if.else
  %tau2 = call i32 (...) @llvm.tau.i32(i32 %tau1, i32 %add6)
  %call14 = call nonnull align 8 dereferenceable(8) %"class.std::basic_ostream"* @_ZNSolsEi(%"class.std::basic_ostream"* nonnull align 8 dereferenceable(8) @_ZSt4cout, i32 %tau2)
  br label %end

Merged overdefined into   %tau2 = call i32 (...) @llvm.tau.i32(i32 %tau1, i32 %add6) : overdefined
Merged overdefined into   %call14 = call nonnull align 8 dereferenceable(8) %"class.std::basic_ostream"* @_ZNSolsEi(%"class.std::basic_ostream"* nonnull align 8 dereferenceable(8) @_ZSt4cout, i32 %tau2) : overdefined
Marking Block Executable: end

Popped off BBWL: 
end:                                              ; preds = %if.end, %sw.bb13
  %add18 = add nsw i32 1, %tau
  ret i32 0

Merged overdefined into   %add18 = add nsw i32 1, %tau : overdefined

Popped off BBWL: 
if.end:                                           ; preds = %if.else, %sw.epilog
  %tau3 = call i32 (...) @llvm.tau.i32(i32 %tau, i32 %add, i32 %add3)
  %add17 = add nsw i32 %add8, %tau3
  store i32 %add17, i32* %m, align 4
  br label %end

Merged overdefined into   %tau3 = call i32 (...) @llvm.tau.i32(i32 %tau, i32 %add, i32 %add3) : overdefined
markOverdefined:   %add17 = add nsw i32 %add8, %tau3
Marking Edge Executable: if.end -> end

Popped off BBWL: 
sw.bb1:                                           ; preds = %entry
  %mul2 = mul nsw i32 2, 1
  %add3 = add nsw i32 %mul2, 5
  br label %sw.epilog

Merged constantrange<2, 3> into   %mul2 = mul nsw i32 2, 1 : constantrange<2, 3>
Merged constantrange<7, 8> into   %add3 = add nsw i32 %mul2, 5 : constantrange<7, 8>
Marking Edge Executable: sw.bb1 -> sw.epilog
Merged constantrange<3, 8> into   %x.0 = phi i32 [ 2, %sw.default ], [ %add6, %sw.bb4 ], [ %add3, %sw.bb1 ], [ %add, %sw.bb ] : constantrange<3, 8>

Popped off BBWL: 
sw.bb:                                            ; preds = %entry
  %mul = mul nsw i32 2, 1
  %add = add nsw i32 %mul, 5
  br label %sw.epilog

Merged constantrange<2, 3> into   %mul = mul nsw i32 2, 1 : constantrange<2, 3>
Merged constantrange<7, 8> into   %add = add nsw i32 %mul, 5 : constantrange<7, 8>
Marking Edge Executable: sw.bb -> sw.epilog

Popped off BBWL: 
sw.default:                                       ; preds = %entry
  br label %sw.epilog

Marking Edge Executable: sw.default -> sw.epilog
Merged constantrange<2, 8> into   %x.0 = phi i32 [ 2, %sw.default ], [ %add6, %sw.bb4 ], [ %add3, %sw.bb1 ], [ %add, %sw.bb ] : constantrange<2, 8>

Popped off OI-WL:   %add17 = add nsw i32 %add8, %tau3

Popped off OI-WL:   %tau3 = call i32 (...) @llvm.tau.i32(i32 %tau, i32 %add, i32 %add3)

Popped off OI-WL:   %add18 = add nsw i32 1, %tau

Popped off OI-WL:   %call14 = call nonnull align 8 dereferenceable(8) %"class.std::basic_ostream"* @_ZNSolsEi(%"class.std::basic_ostream"* nonnull align 8 dereferenceable(8) @_ZSt4cout, i32 %tau2)

Popped off OI-WL:   %tau2 = call i32 (...) @llvm.tau.i32(i32 %tau1, i32 %add6)

Popped off OI-WL:   %add11 = add nsw i32 %add8, %mul10

Popped off OI-WL:   %mul10 = mul nsw i32 3, %tau1

Popped off OI-WL:   %tau1 = call i32 (...) @llvm.tau.i32(i32 %tau, i32 %add3, i32 %add6)

Popped off OI-WL:   %cmp = icmp sle i32 %add8, %add9

Popped off OI-WL:   %add9 = add nsw i32 9, %tau

Popped off OI-WL:   %add8 = add nsw i32 %mul7, 10

Popped off OI-WL:   %mul7 = mul nsw i32 2, %tau

Popped off OI-WL:   %tau = call i32 (...) @llvm.tau.i32(i32 %x.0, i32 %add, i32 %add3, i32 %add6)

Popped off OI-WL:   %i = load i32, i32* %m, align 4

Popped off OI-WL:   %call = call nonnull align 8 dereferenceable(16) %"class.std::basic_istream"* @_ZNSirsERi(%"class.std::basic_istream"* nonnull align 8 dereferenceable(16) @_ZSt3cin, i32* nonnull align 4 dereferenceable(4) %m)

Popped off OI-WL:   %m = alloca i32, align 4

Popped off I-WL:   %x.0 = phi i32 [ 2, %sw.default ], [ %add6, %sw.bb4 ], [ %add3, %sw.bb1 ], [ %add, %sw.bb ]

Popped off I-WL:   %add = add nsw i32 %mul, 5

Popped off I-WL:   %mul = mul nsw i32 2, 1

Popped off I-WL:   %x.0 = phi i32 [ 2, %sw.default ], [ %add6, %sw.bb4 ], [ %add3, %sw.bb1 ], [ %add, %sw.bb ]

Popped off I-WL:   %add3 = add nsw i32 %mul2, 5

Popped off I-WL:   %mul2 = mul nsw i32 2, 1

Popped off I-WL:   %x.0 = phi i32 [ 2, %sw.default ], [ %add6, %sw.bb4 ], [ %add3, %sw.bb1 ], [ %add, %sw.bb ]

Popped off I-WL:   %add6 = add nsw i32 %mul5, 1

Popped off I-WL:   %mul5 = mul nsw i32 2, 1
RESOLVING UNDEFs
  Constant: i32 2 =   %mul = mul nsw i32 2, 1
  Constant: i32 7 =   %add = add nsw i32 2, 5
  Constant: i32 2 =   %mul2 = mul nsw i32 2, 1
  Constant: i32 7 =   %add3 = add nsw i32 2, 5
  Constant: i32 2 =   %mul5 = mul nsw i32 2, 1
  Constant: i32 3 =   %add6 = add nsw i32 2, 1
SCCP on function '_GLOBAL__sub_I_test.cpp'
Marking Block Executable: entry

Popped off BBWL: 
entry:
  call void @__cxx_global_var_init()
  ret void

RESOLVING UNDEFs
===-------------------------------------------------------------------------===
                      ... Pass execution timing report ...
===-------------------------------------------------------------------------===
  Total Execution Time: 0.0125 seconds (0.0125 wall clock)

   ---User Time---   --System Time--   --User+System--   ---Wall Time---  --- Name ---
   0.0063 ( 75.3%)   0.0032 ( 76.0%)   0.0095 ( 75.6%)   0.0095 ( 75.5%)  SCCPPass
   0.0007 (  9.0%)   0.0004 (  8.9%)   0.0011 (  9.0%)   0.0011 (  9.0%)  VerifierPass
   0.0007 (  8.6%)   0.0004 (  8.6%)   0.0011 (  8.6%)   0.0011 (  8.6%)  VerifierAnalysis
   0.0005 (  6.2%)   0.0003 (  6.2%)   0.0008 (  6.2%)   0.0008 (  6.2%)  PrintModulePass
   0.0000 (  0.6%)   0.0000 (  0.2%)   0.0001 (  0.4%)   0.0001 (  0.5%)  PreservedCFGCheckerAnalysis
   0.0000 (  0.2%)   0.0000 (  0.1%)   0.0000 (  0.2%)   0.0000 (  0.2%)  TargetLibraryAnalysis
   0.0083 (100.0%)   0.0042 (100.0%)   0.0125 (100.0%)   0.0125 (100.0%)  Total

===-------------------------------------------------------------------------===
                                LLVM IR Parsing
===-------------------------------------------------------------------------===
  Total Execution Time: 0.0039 seconds (0.0039 wall clock)

   ---User Time---   --User+System--   ---Wall Time---  --- Name ---
   0.0039 (100.0%)   0.0039 (100.0%)   0.0039 (100.0%)  Parse IR
   0.0039 (100.0%)   0.0039 (100.0%)   0.0039 (100.0%)  Total

