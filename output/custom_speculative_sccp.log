----------===Caloric Connector and BuddySet Information===----------
entry: {1 1 1 } 
sw.bb4: { 0 0 1 } 
sw.bb1: { 0 1 0 } 
sw.bb: { 1 0 0 } 
sw.default: 
sw.epilog is a Caloric Connector
sw.epilog: { 0 0 1 } { 0 1 0 } { 1 0 0 } 
if.else is a Caloric Connector
if.else: { 0 0 1 } { 0 1 0 } 
sw.bb15: 
sw.bb14 is a Caloric Connector
sw.bb14: { 0 0 1 } 
sw.default13: 
sw.epilog16: 
if.then: 
if.end is a Caloric Connector
if.end: 
end: { 0 0 1 } 
----------===Initiating Tau Insertion Algroithm===----------
Inserted Tau at : sw.epilog
Inserted Tau at : if.else
Inserted Tau at : sw.bb14
Inserted Tau at : sw.epilog
Inserted Tau at : if.else
Inserted Tau at : sw.bb14
-- BB: entry
---- I: ---- attempt to renaming uses in I
------ Not a phi instruction
------ Not a tau instruction
---- I: ---- attempt to renaming uses in I
------ Not a phi instruction
------ Not a tau instruction
---- I: ---- attempt to renaming uses in I
------ Not a phi instruction
------ Not a tau instruction
---- I: ---- attempt to renaming uses in I
------ Not a phi instruction
------ Not a tau instruction
------ Succesor Logic
-------- Succ: sw.default
-------- Succ: sw.bb
-------- Succ: sw.bb1
-------- Succ: sw.bb4
------ Recurse over Child 
-------- Parent: entry | Child: sw.default
-- BB: sw.default
---- I: ---- attempt to renaming uses in I
------ Not a phi instruction
------ Not a tau instruction
------ Succesor Logic
-------- Succ: sw.epilog
---------- phi: n.0
---------- V: 
---------- Not a phi operand
---------- Not a tau operand
---------- phi: x.0
---------- V: 
---------- Not a phi operand
---------- Not a tau operand
------ Recurse over Child 
------ Remove definitions if needed
-------- Parent: entry | Child: sw.epilog
-- BB: sw.epilog
---- I: ---- attempt to renaming uses in I
------ a phi instruction
------ Not a tau instruction
---- I: ---- attempt to renaming uses in I
------ phi: n.0
------ n.0
------ mrd: n.0
------ a phi instruction
------ Not a tau instruction
---- I: ---- attempt to renaming uses in I
------ phi: n.0
------ n.0
------ mrd: n.0
------ phi: x.0
------ x.0
------ mrd: x.0
------ Not a phi instruction
------ a tau instruction
---- I: ---- attempt to renaming uses in I
------ phi: n.0
------ n.0
------ mrd: n.0
------ phi: x.0
------ tau3
------ mrd: tau3
------ Not a phi instruction
------ a tau instruction
---- I: ---- attempt to renaming uses in I
------ phi: n.0
------ tau
------ mrd: tau
------ phi: x.0
------ tau3
------ mrd: tau3
------ Not a phi instruction
------ Not a tau instruction
---- I: ---- attempt to renaming uses in I
------ phi: n.0
------ tau
------ mrd: tau
------ phi: x.0
------ tau3
------ mrd: tau3
------ Not a phi instruction
------ Not a tau instruction
---- I: ---- attempt to renaming uses in I
------ phi: n.0
------ tau
------ mrd: tau
------ phi: x.0
------ tau3
------ mrd: tau3
------ Not a phi instruction
------ Not a tau instruction
---- I: ---- attempt to renaming uses in I
------ phi: n.0
------ tau
------ mrd: tau
------ phi: x.0
------ tau3
------ mrd: tau3
------ Not a phi instruction
------ Not a tau instruction
---- I: ---- attempt to renaming uses in I
------ phi: n.0
------ tau
------ mrd: tau
------ phi: x.0
------ tau3
------ mrd: tau3
------ Not a phi instruction
------ Not a tau instruction
------ Succesor Logic
-------- Succ: if.then
-------- Succ: if.else
------ Recurse over Child 
-------- Parent: sw.epilog | Child: if.then
-- BB: if.then
---- I: ---- attempt to renaming uses in I
------ phi: n.0
------ tau
------ mrd: tau
------ phi: x.0
------ tau3
------ mrd: tau3
------ Not a phi instruction
------ Not a tau instruction
------ Succesor Logic
-------- Succ: if.end
------ Recurse over Child 
------ Remove definitions if needed
-------- phi: n.0 mrd: tau
---------- mrd not changed
-------- phi: x.0 mrd: tau3
---------- mrd not changed
-------- Parent: sw.epilog | Child: if.end
-- BB: if.end
---- I: ---- attempt to renaming uses in I
------ phi: n.0
------ tau
------ mrd: tau
------ phi: x.0
------ tau3
------ mrd: tau3
------ Not a phi instruction
------ Not a tau instruction
---- I: ---- attempt to renaming uses in I
------ phi: n.0
------ tau
------ mrd: tau
------ phi: x.0
------ tau3
------ mrd: tau3
------ Not a phi instruction
------ Not a tau instruction
---- I: ---- attempt to renaming uses in I
------ phi: n.0
------ tau
------ mrd: tau
------ phi: x.0
------ tau3
------ mrd: tau3
------ Not a phi instruction
------ Not a tau instruction
------ Succesor Logic
-------- Succ: end
------ Recurse over Child 
------ Remove definitions if needed
-------- phi: n.0 mrd: tau
---------- mrd not changed
-------- phi: x.0 mrd: tau3
---------- mrd not changed
-------- Parent: sw.epilog | Child: end
-- BB: end
---- I: ---- attempt to renaming uses in I
------ phi: n.0
------ tau
------ mrd: tau
------ phi: x.0
------ tau3
------ mrd: tau3
------ Not a phi instruction
------ Not a tau instruction
------ Succesor Logic
------ Recurse over Child 
------ Remove definitions if needed
-------- phi: n.0 mrd: tau
---------- mrd not changed
-------- phi: x.0 mrd: tau3
---------- mrd not changed
-------- Parent: sw.epilog | Child: if.else
-- BB: if.else
---- I: ---- attempt to renaming uses in I
------ phi: n.0
------ tau
------ mrd: tau
------ phi: x.0
------ tau3
------ mrd: tau3
------ Not a phi instruction
------ a tau instruction
---- I: ---- attempt to renaming uses in I
------ phi: n.0
------ tau
------ mrd: tau
------ phi: x.0
------ tau4
------ mrd: tau4
------ Not a phi instruction
------ a tau instruction
---- I: ---- attempt to renaming uses in I
------ phi: n.0
------ tau1
------ mrd: tau1
------ phi: x.0
------ tau4
------ mrd: tau4
------ Not a phi instruction
------ Not a tau instruction
---- I: ---- attempt to renaming uses in I
------ phi: n.0
------ tau1
------ mrd: tau1
------ phi: x.0
------ tau4
------ mrd: tau4
------ Not a phi instruction
------ Not a tau instruction
---- I: ---- attempt to renaming uses in I
------ phi: n.0
------ tau1
------ mrd: tau1
------ phi: x.0
------ tau4
------ mrd: tau4
------ Not a phi instruction
------ Not a tau instruction
------ Succesor Logic
-------- Succ: sw.default13
-------- Succ: sw.bb14
-------- Succ: sw.bb15
------ Recurse over Child 
-------- Parent: if.else | Child: sw.default13
-- BB: sw.default13
---- I: ---- attempt to renaming uses in I
------ phi: n.0
------ tau1
------ mrd: tau1
------ phi: x.0
------ tau4
------ mrd: tau4
------ Not a phi instruction
------ Not a tau instruction
------ Succesor Logic
-------- Succ: sw.epilog16
------ Recurse over Child 
-------- Parent: sw.default13 | Child: sw.epilog16
-- BB: sw.epilog16
---- I: ---- attempt to renaming uses in I
------ phi: n.0
------ tau1
------ mrd: tau1
------ phi: x.0
------ tau4
------ mrd: tau4
------ Not a phi instruction
------ Not a tau instruction
------ Succesor Logic
-------- Succ: if.end
------ Recurse over Child 
------ Remove definitions if needed
-------- phi: n.0 mrd: tau1
---------- mrd not changed
-------- phi: x.0 mrd: tau4
---------- mrd not changed
------ Remove definitions if needed
-------- phi: n.0 mrd: tau1
---------- mrd not changed
-------- phi: x.0 mrd: tau4
---------- mrd not changed
-------- Parent: if.else | Child: sw.bb14
-- BB: sw.bb14
---- I: ---- attempt to renaming uses in I
------ phi: n.0
------ tau1
------ mrd: tau1
------ phi: x.0
------ tau4
------ mrd: tau4
------ Not a phi instruction
------ a tau instruction
---- I: ---- attempt to renaming uses in I
------ phi: n.0
------ tau1
------ mrd: tau1
------ phi: x.0
------ tau5
------ mrd: tau5
------ Not a phi instruction
------ a tau instruction
---- I: ---- attempt to renaming uses in I
------ phi: n.0
------ tau2
------ mrd: tau2
------ phi: x.0
------ tau5
------ mrd: tau5
------ Not a phi instruction
------ Not a tau instruction
------ Succesor Logic
-------- Succ: end
------ Recurse over Child 
------ Remove definitions if needed
-------- phi: n.0 mrd: tau2
---------- mrd changed
-------- phi: x.0 mrd: tau5
---------- mrd changed
-------- Parent: if.else | Child: sw.bb15
-- BB: sw.bb15
---- I: ---- attempt to renaming uses in I
------ phi: n.0
------ tau1
------ mrd: tau1
------ phi: x.0
------ tau4
------ mrd: tau4
------ Not a phi instruction
------ Not a tau instruction
---- I: ---- attempt to renaming uses in I
------ phi: n.0
------ tau1
------ mrd: tau1
------ phi: x.0
------ tau4
------ mrd: tau4
------ Not a phi instruction
------ Not a tau instruction
------ Succesor Logic
------ Recurse over Child 
------ Remove definitions if needed
-------- phi: n.0 mrd: tau1
---------- mrd not changed
-------- phi: x.0 mrd: tau4
---------- mrd not changed
------ Remove definitions if needed
-------- phi: n.0 mrd: tau1
---------- mrd changed
-------- phi: x.0 mrd: tau4
---------- mrd changed
------ Remove definitions if needed
-------- phi: n.0 mrd: tau
---------- mrd changed
-------- phi: x.0 mrd: tau3
---------- mrd changed
-------- Parent: entry | Child: sw.bb
-- BB: sw.bb
---- I: ---- attempt to renaming uses in I
------ phi: n.0
------ n.0
------ mrd: n.0
------ phi: x.0
------ x.0
------ mrd: x.0
------ Not a phi instruction
------ Not a tau instruction
---- I: ---- attempt to renaming uses in I
------ phi: n.0
------ n.0
------ mrd: n.0
------ phi: x.0
------ x.0
------ mrd: x.0
------ Not a phi instruction
------ Not a tau instruction
---- I: ---- attempt to renaming uses in I
------ phi: n.0
------ n.0
------ mrd: n.0
------ phi: x.0
------ x.0
------ mrd: x.0
------ Not a phi instruction
------ Not a tau instruction
------ Succesor Logic
-------- Succ: sw.epilog
---------- phi: n.0
---------- V: 
---------- Not a phi operand
---------- Not a tau operand
---------- phi: x.0
---------- V: add
---------- Not a phi operand
---------- Not a tau operand
------ Recurse over Child 
------ Remove definitions if needed
-------- phi: n.0 mrd: n.0
---------- mrd not changed
-------- phi: x.0 mrd: x.0
---------- mrd not changed
-------- Parent: entry | Child: sw.bb1
-- BB: sw.bb1
---- I: ---- attempt to renaming uses in I
------ phi: n.0
------ n.0
------ mrd: n.0
------ phi: x.0
------ x.0
------ mrd: x.0
------ Not a phi instruction
------ Not a tau instruction
---- I: ---- attempt to renaming uses in I
------ phi: n.0
------ n.0
------ mrd: n.0
------ phi: x.0
------ x.0
------ mrd: x.0
------ Not a phi instruction
------ Not a tau instruction
---- I: ---- attempt to renaming uses in I
------ phi: n.0
------ n.0
------ mrd: n.0
------ phi: x.0
------ x.0
------ mrd: x.0
------ Not a phi instruction
------ Not a tau instruction
---- I: ---- attempt to renaming uses in I
------ phi: n.0
------ n.0
------ mrd: n.0
------ phi: x.0
------ x.0
------ mrd: x.0
------ Not a phi instruction
------ Not a tau instruction
------ Succesor Logic
-------- Succ: sw.epilog
---------- phi: n.0
---------- V: sub
---------- Not a phi operand
---------- Not a tau operand
---------- phi: x.0
---------- V: add3
---------- Not a phi operand
---------- Not a tau operand
------ Recurse over Child 
------ Remove definitions if needed
-------- phi: n.0 mrd: n.0
---------- mrd not changed
-------- phi: x.0 mrd: x.0
---------- mrd not changed
-------- Parent: entry | Child: sw.bb4
-- BB: sw.bb4
---- I: ---- attempt to renaming uses in I
------ phi: n.0
------ n.0
------ mrd: n.0
------ phi: x.0
------ x.0
------ mrd: x.0
------ Not a phi instruction
------ Not a tau instruction
---- I: ---- attempt to renaming uses in I
------ phi: n.0
------ n.0
------ mrd: n.0
------ phi: x.0
------ x.0
------ mrd: x.0
------ Not a phi instruction
------ Not a tau instruction
---- I: ---- attempt to renaming uses in I
------ phi: n.0
------ n.0
------ mrd: n.0
------ phi: x.0
------ x.0
------ mrd: x.0
------ Not a phi instruction
------ Not a tau instruction
---- I: ---- attempt to renaming uses in I
------ phi: n.0
------ n.0
------ mrd: n.0
------ phi: x.0
------ x.0
------ mrd: x.0
------ Not a phi instruction
------ Not a tau instruction
------ Succesor Logic
-------- Succ: sw.epilog
---------- phi: n.0
---------- V: add7
---------- Not a phi operand
---------- Not a tau operand
---------- phi: x.0
---------- V: add6
---------- Not a phi operand
---------- Not a tau operand
------ Recurse over Child 
------ Remove definitions if needed
-------- phi: n.0 mrd: n.0
---------- mrd not changed
-------- phi: x.0 mrd: x.0
---------- mrd not changed
------ Remove definitions if needed
-------- phi: n.0 mrd: n.0
---------- mrd not changed
-------- phi: x.0 mrd: x.0
---------- mrd not changed
Speculative SCCP on function 'main'
Marking Block Executable: entry

Popped off BBWL: 
entry:
  %m = alloca i32, align 4
  %call = call nonnull align 8 dereferenceable(16) %"class.std::basic_istream"* @_ZNSirsERi(%"class.std::basic_istream"* nonnull align 8 dereferenceable(16) @_ZSt3cin, i32* nonnull align 4 dereferenceable(4) %m)
  %i = load i32, i32* %m, align 4
  switch i32 %i, label %sw.default [
    i32 2, label %sw.bb
    i32 4, label %sw.bb1
    i32 6, label %sw.bb4
  ]

	[Taulog] Visiting Other Instruction :   %m = alloca i32, align 4
Spec SCCP: Don't know how to handle:   %m = alloca i32, align 4
markOverdefined:   %m = alloca i32, align 4
	[Taulog] Visiting Call Instruction :   %call = call nonnull align 8 dereferenceable(16) %"class.std::basic_istream"* @_ZNSirsERi(%"class.std::basic_istream"* nonnull align 8 dereferenceable(16) @_ZSt3cin, i32* nonnull align 4 dereferenceable(4) %m)
Merged overdefined into   %call = call nonnull align 8 dereferenceable(16) %"class.std::basic_istream"* @_ZNSirsERi(%"class.std::basic_istream"* nonnull align 8 dereferenceable(16) @_ZSt3cin, i32* nonnull align 4 dereferenceable(4) %m) : overdefined
	[Taulog] Visiting Other Instruction :   %i = load i32, i32* %m, align 4
Merged overdefined into   %i = load i32, i32* %m, align 4 : overdefined
	[Taulog] Visiting Other Instruction :   switch i32 %i, label %sw.default [
    i32 2, label %sw.bb
    i32 4, label %sw.bb1
    i32 6, label %sw.bb4
  ]
Marking Block Executable: sw.default
Marking Block Executable: sw.bb
Marking Block Executable: sw.bb1
Marking Block Executable: sw.bb4

Popped off BBWL: 
sw.bb4:                                           ; preds = %entry
  %mul5 = mul nsw i32 2, 1
  %add6 = add nsw i32 %mul5, 1
  %add7 = add nsw i32 %add6, 2
  br label %sw.epilog

	[Taulog] Visiting Other Instruction :   %mul5 = mul nsw i32 2, 1
	[Taulog] 2 : constantrange<2, 3>, 1 : constantrange<1, 2>
		Unknown LHS
Merged constantrange<2, 3> into   %mul5 = mul nsw i32 2, 1 : constantrange<2, 3>
	[Taulog] Visiting Other Instruction :   %add6 = add nsw i32 %mul5, 1
	[Taulog] mul5 : constantrange<2, 3>, 1 : constantrange<1, 2>
		Unknown LHS
Merged constantrange<3, 4> into   %add6 = add nsw i32 %mul5, 1 : constantrange<3, 4>
	[Taulog] Visiting Other Instruction :   %add7 = add nsw i32 %add6, 2
	[Taulog] add6 : constantrange<3, 4>, 2 : constantrange<2, 3>
		Unknown LHS
Merged constantrange<5, 6> into   %add7 = add nsw i32 %add6, 2 : constantrange<5, 6>
	[Taulog] Visiting Other Instruction :   br label %sw.epilog
Marking Block Executable: sw.epilog

Popped off BBWL: 
sw.epilog:                                        ; preds = %sw.default, %sw.bb4, %sw.bb1, %sw.bb
  %n.0 = phi i32 [ undef, %sw.default ], [ %add7, %sw.bb4 ], [ %sub, %sw.bb1 ], [ 10, %sw.bb ]
  %x.0 = phi i32 [ 2, %sw.default ], [ %add6, %sw.bb4 ], [ %add3, %sw.bb1 ], [ %add, %sw.bb ]
  %tau3 = call i32 (...) @llvm.tau.i32(i32 %x.0, i32 %add, i32 %add3, i32 %add6)
  %tau = call i32 (...) @llvm.tau.i32(i32 %n.0, i32 %sub, i32 %add7, i32 10)
  %mul8 = mul nsw i32 2, %tau3
  %add9 = add nsw i32 %mul8, 10
  %add10 = add nsw i32 9, %tau3
  %cmp = icmp sle i32 %add9, %add10
  br i1 %cmp, label %if.then, label %if.else

	[Taulog] Visiting Other Instruction :   %n.0 = phi i32 [ undef, %sw.default ], [ %add7, %sw.bb4 ], [ %sub, %sw.bb1 ], [ 10, %sw.bb ]
Marking Spec PHINode exec.
		Unknown LHS
		Unknown LHS
Merged constantrange<5, 6> into   %n.0 = phi i32 [ undef, %sw.default ], [ %add7, %sw.bb4 ], [ %sub, %sw.bb1 ], [ 10, %sw.bb ] : constantrange<5, 6>
	[Taulog] Visiting Other Instruction :   %x.0 = phi i32 [ 2, %sw.default ], [ %add6, %sw.bb4 ], [ %add3, %sw.bb1 ], [ %add, %sw.bb ]
Marking Spec PHINode exec.
		Unknown LHS
		Unknown LHS
Merged constantrange<3, 4> into   %x.0 = phi i32 [ 2, %sw.default ], [ %add6, %sw.bb4 ], [ %add3, %sw.bb1 ], [ %add, %sw.bb ] : constantrange<3, 4>
	[Taulog] Visiting LLVM Instrinsic : llvm.tau (  %tau3 = call i32 (...) @llvm.tau.i32(i32 %x.0, i32 %add, i32 %add3, i32 %add6))
		Tau State init : unknown
		x0 (phi-state) x.0 : constantrange<3, 4>
		Tau Operand (L) : add, unknown
		Tau Operand (L) : add3, unknown
		Unknown LHS
		Tau Operand (L) : add6, constantrange<3, 4>
	Beta : speculative constantrange<3, 4>, x0 : constantrange<3, 4>
	Lattice (Tau) : tau3, unknown, (TauState) : unknown 
		ValueLattice (TauState) tau3 : unknown

	[Taulog] Visiting LLVM Instrinsic : llvm.tau (  %tau = call i32 (...) @llvm.tau.i32(i32 %n.0, i32 %sub, i32 %add7, i32 10))
		Tau State init : unknown
		x0 (phi-state) n.0 : constantrange<5, 6>
		Tau Operand (L) : sub, unknown
		Unknown LHS
		Tau Operand (L) : add7, constantrange<5, 6>
		Tau Operand (L) : 10, constantrange<10, 11>
	Beta : constantrange<5, 11>, x0 : constantrange<5, 6>
	Lattice (Tau) : tau, unknown, (TauState) : unknown 
		ValueLattice (TauState) tau : unknown

	[Taulog] Visiting Other Instruction :   %mul8 = mul nsw i32 2, %tau3
	[Taulog] 2 : constantrange<2, 3>, tau3 : unknown
	[Taulog] Visiting Other Instruction :   %add9 = add nsw i32 %mul8, 10
	[Taulog] mul8 : unknown, 10 : constantrange<10, 11>
	[Taulog] Visiting Other Instruction :   %add10 = add nsw i32 9, %tau3
	[Taulog] 9 : constantrange<9, 10>, tau3 : unknown
	[Taulog] Visiting Other Instruction :   %cmp = icmp sle i32 %add9, %add10
	[Taulog] Visiting Other Instruction :   br i1 %cmp, label %if.then, label %if.else

Popped off BBWL: 
sw.bb1:                                           ; preds = %entry
  %mul2 = mul nsw i32 2, 1
  %add3 = add nsw i32 %mul2, 5
  %sub = sub nsw i32 %add3, 2
  br label %sw.epilog

	[Taulog] Visiting Other Instruction :   %mul2 = mul nsw i32 2, 1
	[Taulog] 2 : constantrange<2, 3>, 1 : constantrange<1, 2>
		Unknown LHS
Merged constantrange<2, 3> into   %mul2 = mul nsw i32 2, 1 : constantrange<2, 3>
	[Taulog] Visiting Other Instruction :   %add3 = add nsw i32 %mul2, 5
	[Taulog] mul2 : constantrange<2, 3>, 5 : constantrange<5, 6>
		Unknown LHS
Merged constantrange<7, 8> into   %add3 = add nsw i32 %mul2, 5 : constantrange<7, 8>
	[Taulog] Visiting Other Instruction :   %sub = sub nsw i32 %add3, 2
	[Taulog] add3 : constantrange<7, 8>, 2 : constantrange<2, 3>
		Unknown LHS
Merged constantrange<5, 6> into   %sub = sub nsw i32 %add3, 2 : constantrange<5, 6>
	[Taulog] Visiting Other Instruction :   br label %sw.epilog
Marking Edge Executable: sw.bb1 -> sw.epilog
Marking Spec PHINode exec.
Marking Spec PHINode exec.
Merged constantrange<3, 8> into   %x.0 = phi i32 [ 2, %sw.default ], [ %add6, %sw.bb4 ], [ %add3, %sw.bb1 ], [ %add, %sw.bb ] : constantrange<3, 8>
		Tau State init : unknown
		x0 (phi-state) x.0 : constantrange<3, 8>
		Tau Operand (L) : add, unknown
		Unknown LHS
		Tau Operand (L) : add3, constantrange<7, 8>
		Tau Operand (L) : add6, constantrange<3, 4>
	Beta : constantrange<3, 8>, x0 : constantrange<3, 8>
	Lattice (Tau) : tau3, unknown, (TauState) : unknown 
		ValueLattice (TauState) tau3 : unknown

		Tau State init : unknown
		x0 (phi-state) n.0 : constantrange<5, 6>
		Tau Operand (L) : sub, constantrange<5, 6>
		Tau Operand (L) : add7, constantrange<5, 6>
		Tau Operand (L) : 10, constantrange<10, 11>
	Beta : constantrange<5, 11>, x0 : constantrange<5, 6>
	Lattice (Tau) : tau, unknown, (TauState) : unknown 
		ValueLattice (TauState) tau : unknown


Popped off BBWL: 
sw.bb:                                            ; preds = %entry
  %mul = mul nsw i32 2, 1
  %add = add nsw i32 %mul, 5
  br label %sw.epilog

	[Taulog] Visiting Other Instruction :   %mul = mul nsw i32 2, 1
	[Taulog] 2 : constantrange<2, 3>, 1 : constantrange<1, 2>
		Unknown LHS
Merged constantrange<2, 3> into   %mul = mul nsw i32 2, 1 : constantrange<2, 3>
	[Taulog] Visiting Other Instruction :   %add = add nsw i32 %mul, 5
	[Taulog] mul : constantrange<2, 3>, 5 : constantrange<5, 6>
		Unknown LHS
Merged constantrange<7, 8> into   %add = add nsw i32 %mul, 5 : constantrange<7, 8>
	[Taulog] Visiting Other Instruction :   br label %sw.epilog
Marking Edge Executable: sw.bb -> sw.epilog
Marking Spec PHINode exec.
Merged constantrange<5, 11> into   %n.0 = phi i32 [ undef, %sw.default ], [ %add7, %sw.bb4 ], [ %sub, %sw.bb1 ], [ 10, %sw.bb ] : constantrange<5, 11>
Marking Spec PHINode exec.
		Tau State init : unknown
		x0 (phi-state) x.0 : constantrange<3, 8>
		Tau Operand (L) : add, constantrange<7, 8>
		Tau Operand (L) : add3, constantrange<7, 8>
		Tau Operand (L) : add6, constantrange<3, 4>
	Beta : constantrange<3, 8>, x0 : constantrange<3, 8>
	Lattice (Tau) : tau3, unknown, (TauState) : unknown 
		ValueLattice (TauState) tau3 : unknown

		Tau State init : unknown
		x0 (phi-state) n.0 : constantrange<5, 11>
		Tau Operand (L) : sub, constantrange<5, 6>
		Tau Operand (L) : add7, constantrange<5, 6>
		Tau Operand (L) : 10, constantrange<10, 11>
	Beta : constantrange<5, 11>, x0 : constantrange<5, 11>
	Lattice (Tau) : tau, unknown, (TauState) : unknown 
		ValueLattice (TauState) tau : unknown


Popped off BBWL: 
sw.default:                                       ; preds = %entry
  br label %sw.epilog

	[Taulog] Visiting Other Instruction :   br label %sw.epilog
Marking Edge Executable: sw.default -> sw.epilog
Marking Spec PHINode exec.
Merged constantrange incl. undef <5, 11> into   %n.0 = phi i32 [ undef, %sw.default ], [ %add7, %sw.bb4 ], [ %sub, %sw.bb1 ], [ 10, %sw.bb ] : constantrange incl. undef <5, 11>
Marking Spec PHINode exec.
Merged constantrange<2, 8> into   %x.0 = phi i32 [ 2, %sw.default ], [ %add6, %sw.bb4 ], [ %add3, %sw.bb1 ], [ %add, %sw.bb ] : constantrange<2, 8>
		Tau State init : unknown
		x0 (phi-state) x.0 : constantrange<2, 8>
		Tau Operand (L) : add, constantrange<7, 8>
		Tau Operand (L) : add3, constantrange<7, 8>
		Tau Operand (L) : add6, constantrange<3, 4>
	Beta : constantrange<3, 8>, x0 : constantrange<2, 8>
	Lattice (Tau) : tau3, unknown, (TauState) : unknown 
		ValueLattice (TauState) tau3 : unknown

		Tau State init : unknown
		x0 (phi-state) n.0 : constantrange incl. undef <5, 11>
		Tau Operand (L) : sub, constantrange<5, 6>
		Tau Operand (L) : add7, constantrange<5, 6>
		Tau Operand (L) : 10, constantrange<10, 11>
	Beta : constantrange<5, 11>, x0 : constantrange incl. undef <5, 11>
	Lattice (Tau) : tau, unknown, (TauState) : unknown 
		ValueLattice (TauState) tau : unknown


Popped off OI-WL:   %i = load i32, i32* %m, align 4

Popped off OI-WL:   %call = call nonnull align 8 dereferenceable(16) %"class.std::basic_istream"* @_ZNSirsERi(%"class.std::basic_istream"* nonnull align 8 dereferenceable(16) @_ZSt3cin, i32* nonnull align 4 dereferenceable(4) %m)

Popped off OI-WL:   %m = alloca i32, align 4

Popped off I-WL:   %x.0 = phi i32 [ 2, %sw.default ], [ %add6, %sw.bb4 ], [ %add3, %sw.bb1 ], [ %add, %sw.bb ]
Merged overdefined into   %tau3 = call i32 (...) @llvm.tau.i32(i32 %x.0, i32 %add, i32 %add3, i32 %add6) : overdefined

Popped off I-WL:   %n.0 = phi i32 [ undef, %sw.default ], [ %add7, %sw.bb4 ], [ %sub, %sw.bb1 ], [ 10, %sw.bb ]
Merged overdefined into   %tau = call i32 (...) @llvm.tau.i32(i32 %n.0, i32 %sub, i32 %add7, i32 10) : overdefined

Popped off I-WL:   %n.0 = phi i32 [ undef, %sw.default ], [ %add7, %sw.bb4 ], [ %sub, %sw.bb1 ], [ 10, %sw.bb ]

Popped off I-WL:   %add = add nsw i32 %mul, 5
Marking Spec PHINode exec.

Popped off I-WL:   %mul = mul nsw i32 2, 1
	[Taulog] mul : constantrange<2, 3>, 5 : constantrange<5, 6>

Popped off I-WL:   %x.0 = phi i32 [ 2, %sw.default ], [ %add6, %sw.bb4 ], [ %add3, %sw.bb1 ], [ %add, %sw.bb ]

Popped off I-WL:   %sub = sub nsw i32 %add3, 2
Marking Spec PHINode exec.

Popped off I-WL:   %add3 = add nsw i32 %mul2, 5
Marking Spec PHINode exec.
	[Taulog] add3 : constantrange<7, 8>, 2 : constantrange<2, 3>

Popped off I-WL:   %mul2 = mul nsw i32 2, 1
	[Taulog] mul2 : constantrange<2, 3>, 5 : constantrange<5, 6>

Popped off I-WL:   %x.0 = phi i32 [ 2, %sw.default ], [ %add6, %sw.bb4 ], [ %add3, %sw.bb1 ], [ %add, %sw.bb ]

Popped off I-WL:   %n.0 = phi i32 [ undef, %sw.default ], [ %add7, %sw.bb4 ], [ %sub, %sw.bb1 ], [ 10, %sw.bb ]

Popped off I-WL:   %add7 = add nsw i32 %add6, 2
Marking Spec PHINode exec.

Popped off I-WL:   %add6 = add nsw i32 %mul5, 1
Marking Spec PHINode exec.
	[Taulog] add6 : constantrange<3, 4>, 2 : constantrange<2, 3>

Popped off I-WL:   %mul5 = mul nsw i32 2, 1
	[Taulog] mul5 : constantrange<2, 3>, 1 : constantrange<1, 2>

Popped off OI-WL:   %tau = call i32 (...) @llvm.tau.i32(i32 %n.0, i32 %sub, i32 %add7, i32 10)

Popped off OI-WL:   %tau3 = call i32 (...) @llvm.tau.i32(i32 %x.0, i32 %add, i32 %add3, i32 %add6)
	[Taulog] 9 : constantrange<9, 10>, tau3 : overdefined
Merged overdefined into   %add10 = add nsw i32 9, %tau3 : overdefined
	[Taulog] 2 : constantrange<2, 3>, tau3 : overdefined
Merged overdefined into   %mul8 = mul nsw i32 2, %tau3 : overdefined

Popped off OI-WL:   %mul8 = mul nsw i32 2, %tau3
	[Taulog] mul8 : overdefined, 10 : constantrange<10, 11>
Merged overdefined into   %add9 = add nsw i32 %mul8, 10 : overdefined

Popped off OI-WL:   %add9 = add nsw i32 %mul8, 10
markOverdefined:   %cmp = icmp sle i32 %add9, %add10

Popped off OI-WL:   %cmp = icmp sle i32 %add9, %add10
Marking Block Executable: if.then
Marking Block Executable: if.else

Popped off OI-WL:   %add10 = add nsw i32 9, %tau3

Popped off BBWL: 
if.else:                                          ; preds = %sw.epilog
  %tau4 = call i32 (...) @llvm.tau.i32(i32 %tau3, i32 %add3, i32 %add6)
  %tau1 = call i32 (...) @llvm.tau.i32(i32 %tau, i32 %sub, i32 %add7)
  %mul11 = mul nsw i32 3, %tau4
  %add12 = add nsw i32 %tau1, %mul11
  switch i32 %add12, label %sw.default13 [
    i32 200, label %sw.bb14
    i32 300, label %sw.bb15
  ]

	[Taulog] Visiting LLVM Instrinsic : llvm.tau (  %tau4 = call i32 (...) @llvm.tau.i32(i32 %tau3, i32 %add3, i32 %add6))
		Tau State init : unknown
		x0 (phi-state) tau3 : overdefined
		Tau Operand (L) : add3, constantrange<7, 8>
		Tau Operand (L) : add6, constantrange<3, 4>
	Beta : constantrange<3, 8>, x0 : overdefined
	Lattice (Tau) : tau4, unknown, (TauState) : unknown 
		ValueLattice (TauState) tau4 : unknown

	[Taulog] Visiting LLVM Instrinsic : llvm.tau (  %tau1 = call i32 (...) @llvm.tau.i32(i32 %tau, i32 %sub, i32 %add7))
		Tau State init : unknown
		x0 (phi-state) tau : overdefined
		Tau Operand (L) : sub, constantrange<5, 6>
		Tau Operand (L) : add7, constantrange<5, 6>
	Beta : speculative constantrange<5, 6>, x0 : overdefined
	Lattice (Tau) : tau1, speculative constantrange<5, 6>, (TauState) : speculative constantrange<5, 6> 
		ValueLattice (TauState) tau1 : speculative constantrange<5, 6>

		%spec_tau1 = call i32 @specConst(i32 %tau1, i32 5)
	[Taulog] Visiting Other Instruction :   %mul11 = mul nsw i32 3, %tau4
	[Taulog] 3 : constantrange<3, 4>, tau4 : unknown
	[Taulog] Visiting Other Instruction :   %add12 = add nsw i32 %tau1, %mul11
	[Taulog] tau1 : constantrange<5, 6>, mul11 : unknown
	[Taulog] Visiting Other Instruction :   switch i32 %add12, label %sw.default13 [
    i32 200, label %sw.bb14
    i32 300, label %sw.bb15
  ]

Popped off BBWL: 
if.then:                                          ; preds = %sw.epilog
  br label %if.end

	[Taulog] Visiting Other Instruction :   br label %if.end
Marking Block Executable: if.end

Popped off BBWL: 
if.end:                                           ; preds = %sw.epilog16, %if.then
  %add17 = add nsw i32 %tau, %tau3
  store i32 %add17, i32* %m, align 4
  br label %end

	[Taulog] Visiting Other Instruction :   %add17 = add nsw i32 %tau, %tau3
	[Taulog] tau : overdefined, tau3 : overdefined
markOverdefined:   %add17 = add nsw i32 %tau, %tau3
	[Taulog] Visiting Other Instruction :   store i32 %add17, i32* %m, align 4
	[Taulog] Visiting Other Instruction :   br label %end
Marking Block Executable: end

Popped off BBWL: 
end:                                              ; preds = %if.end, %sw.bb14
  ret i32 0

	[Taulog] Visiting Other Instruction :   ret i32 0

Popped off OI-WL:   %add17 = add nsw i32 %tau, %tau3
RESOLVING UNDEFs
markOverdefined:   %mul11 = mul nsw i32 3, %tau4
markOverdefined:   %add12 = add nsw i32 %tau1, %mul11

Popped off OI-WL:   %add12 = add nsw i32 %tau1, %mul11
Marking Block Executable: sw.default13
Marking Block Executable: sw.bb14
Marking Block Executable: sw.bb15

Popped off OI-WL:   %mul11 = mul nsw i32 3, %tau4
	[Taulog] tau1 : constantrange<5, 6>, mul11 : overdefined

Popped off BBWL: 
sw.bb15:                                          ; preds = %if.else
  call void @exit(i32 0) #7
  unreachable

	[Taulog] Visiting Call Instruction :   call void @exit(i32 0) #7
	[Taulog] Visiting Other Instruction :   unreachable

Popped off BBWL: 
sw.bb14:                                          ; preds = %if.else
  br label %end

	[Taulog] Visiting Other Instruction :   br label %end
Marking Edge Executable: sw.bb14 -> end

Popped off BBWL: 
sw.default13:                                     ; preds = %if.else
  br label %sw.epilog16

	[Taulog] Visiting Other Instruction :   br label %sw.epilog16
Marking Block Executable: sw.epilog16

Popped off BBWL: 
sw.epilog16:                                      ; preds = %sw.default13
  br label %if.end

	[Taulog] Visiting Other Instruction :   br label %if.end
Marking Edge Executable: sw.epilog16 -> if.end
RESOLVING UNDEFs
  Constant: i32 2 =   %mul5 = mul nsw i32 2, 1
  Constant: i32 3 =   %add6 = add nsw i32 2, 1
  Constant: i32 5 =   %add7 = add nsw i32 3, 2
  Constant: i32 2 =   %mul2 = mul nsw i32 2, 1
  Constant: i32 7 =   %add3 = add nsw i32 2, 5
  Constant: i32 5 =   %sub = sub nsw i32 7, 2
  Constant: i32 2 =   %mul = mul nsw i32 2, 1
  Constant: i32 7 =   %add = add nsw i32 2, 5
  Constant: i32 undef =   %tau4 = call i32 (...) @llvm.tau.i32(i32 %tau3, i32 7, i32 3)
  Speculative Constant: i32 5 =   %tau1 = call i32 (...) @llvm.tau.i32(i32 %tau, i32 5, i32 5)
Speculative Tau: llvm.tau.i32	
opt: /home/sl55/llvm-project/llvm/lib/IR/Instructions.cpp:493: void llvm::CallInst::init(llvm::FunctionType*, llvm::Value*, llvm::ArrayRef<llvm::Value*>, llvm::ArrayRef<llvm::OperandBundleDefT<llvm::Value*> >, const llvm::Twine&): Assertion `(i >= FTy->getNumParams() || FTy->getParamType(i) == Args[i]->getType()) && "Calling a function with a bad signature!"' failed.
PLEASE submit a bug report to https://bugs.llvm.org/ and include the crash backtrace.
Stack dump:
0.	Program arguments: /home/sl55/llvm-project/build/bin/opt -load build/SCCPSolverTau.cpp.so -load build/HPSSA.cpp.so -load-pass-plugin=build/HPSSA_new.cpp.so -load-pass-plugin=build/SCCPTau.cpp.so -passes=tausccp -time-passes -debug-only=tausccp IR/LL/test_mem2reg.ll -S -o IR/LL/test_spec_sccp.ll -f
 #0 0x000055965f5c83e4 PrintStackTraceSignalHandler(void*) Signals.cpp:0:0
 #1 0x000055965f5c5b8e SignalHandler(int) Signals.cpp:0:0
 #2 0x00007f8c483593c0 __restore_rt (/lib/x86_64-linux-gnu/libpthread.so.0+0x143c0)
 #3 0x00007f8c47df603b raise /build/glibc-sMfBJT/glibc-2.31/signal/../sysdeps/unix/sysv/linux/raise.c:51:1
 #4 0x00007f8c47dd5859 abort /build/glibc-sMfBJT/glibc-2.31/stdlib/abort.c:81:7
 #5 0x00007f8c47dd5729 get_sysdep_segment_value /build/glibc-sMfBJT/glibc-2.31/intl/loadmsgcat.c:509:8
 #6 0x00007f8c47dd5729 _nl_load_domain /build/glibc-sMfBJT/glibc-2.31/intl/loadmsgcat.c:970:34
 #7 0x00007f8c47de7006 (/lib/x86_64-linux-gnu/libc.so.6+0x34006)
 #8 0x000055965ec3d5a3 llvm::CallInst::init(llvm::FunctionType*, llvm::Value*, llvm::ArrayRef<llvm::Value*>, llvm::ArrayRef<llvm::OperandBundleDefT<llvm::Value*> >, llvm::Twine const&) (/home/sl55/llvm-project/build/bin/opt+0x28145a3)
 #9 0x00007f8c47cb7437 llvm::CallInst::CallInst(llvm::FunctionType*, llvm::Value*, llvm::ArrayRef<llvm::Value*>, llvm::ArrayRef<llvm::OperandBundleDefT<llvm::Value*> >, llvm::Twine const&, llvm::Instruction*) (build/HPSSA.cpp.so+0x5e437)
#10 0x00007f8c47cb71ee llvm::CallInst::Create(llvm::FunctionType*, llvm::Value*, llvm::ArrayRef<llvm::Value*>, llvm::Twine const&, llvm::Instruction*) (build/HPSSA.cpp.so+0x5e1ee)
#11 0x00007f8c47caec82 llvm::CallInst::Create(llvm::FunctionCallee, llvm::ArrayRef<llvm::Value*>, llvm::Twine const&, llvm::Instruction*) (build/HPSSA.cpp.so+0x55c82)
#12 0x00007f8c47b84ca3 llvm::insertSpeculativeValues(llvm::Function&, llvm::Value*, unsigned long) (build/SCCPTau.cpp.so+0x31ca3)
#13 0x00007f8c47b7cb08 tryToReplaceWithConstant(llvm::SCCPTauSolver&, llvm::Value*, llvm::Function&) SCCPTau.cpp:0:0
#14 0x00007f8c47b7be60 simplifyInstsInBlock(llvm::SCCPTauSolver&, llvm::BasicBlock&, llvm::SmallPtrSetImpl<llvm::Value*>&, llvm::TrackingStatistic&, llvm::TrackingStatistic&, llvm::Function&) SCCPTau.cpp:0:0
#15 0x00007f8c47b7bbbb runSCCP(llvm::Function&, llvm::DataLayout const&, llvm::TargetLibraryInfo const*) SCCPTau.cpp:0:0
#16 0x00007f8c47b7b5b7 llvm::SCCPTauPass::run(llvm::Function&, llvm::AnalysisManager<llvm::Function>&) (build/SCCPTau.cpp.so+0x285b7)
#17 0x00007f8c47b8c497 llvm::detail::PassModel<llvm::Function, llvm::SCCPTauPass, llvm::PreservedAnalyses, llvm::AnalysisManager<llvm::Function> >::run(llvm::Function&, llvm::AnalysisManager<llvm::Function>&) (build/SCCPTau.cpp.so+0x39497)
#18 0x000055965ecc1f96 llvm::PassManager<llvm::Function, llvm::AnalysisManager<llvm::Function> >::run(llvm::Function&, llvm::AnalysisManager<llvm::Function>&) (/home/sl55/llvm-project/build/bin/opt+0x2898f96)
#19 0x000055965d18bcf6 llvm::detail::PassModel<llvm::Function, llvm::PassManager<llvm::Function, llvm::AnalysisManager<llvm::Function> >, llvm::PreservedAnalyses, llvm::AnalysisManager<llvm::Function> >::run(llvm::Function&, llvm::AnalysisManager<llvm::Function>&) crtstuff.c:0:0
#20 0x000055965ecc0ab9 llvm::ModuleToFunctionPassAdaptor::run(llvm::Module&, llvm::AnalysisManager<llvm::Module>&) (/home/sl55/llvm-project/build/bin/opt+0x2897ab9)
#21 0x000055965cddce06 llvm::detail::PassModel<llvm::Module, llvm::ModuleToFunctionPassAdaptor, llvm::PreservedAnalyses, llvm::AnalysisManager<llvm::Module> >::run(llvm::Module&, llvm::AnalysisManager<llvm::Module>&) crtstuff.c:0:0
#22 0x000055965ecbe39f llvm::PassManager<llvm::Module, llvm::AnalysisManager<llvm::Module> >::run(llvm::Module&, llvm::AnalysisManager<llvm::Module>&) (/home/sl55/llvm-project/build/bin/opt+0x289539f)
#23 0x000055965cde8e30 llvm::runPassPipeline(llvm::StringRef, llvm::Module&, llvm::TargetMachine*, llvm::TargetLibraryInfoImpl*, llvm::ToolOutputFile*, llvm::ToolOutputFile*, llvm::ToolOutputFile*, llvm::StringRef, llvm::ArrayRef<llvm::StringRef>, llvm::opt_tool::OutputKind, llvm::opt_tool::VerifierKind, bool, bool, bool, bool, bool, bool) (/home/sl55/llvm-project/build/bin/opt+0x9bfe30)
#24 0x000055965cd20e07 main (/home/sl55/llvm-project/build/bin/opt+0x8f7e07)
#25 0x00007f8c47dd70b3 __libc_start_main /build/glibc-sMfBJT/glibc-2.31/csu/../csu/libc-start.c:342:3
#26 0x000055965cddaa4e _start (/home/sl55/llvm-project/build/bin/opt+0x9b1a4e)
Aborted (core dumped)
