----------===Caloric Connector and BuddySet Information===----------
entry: {1 } 
start: { 1 } 
sw.bb6: 
label_8: 
sw.bb5: 
label_5: 
sw.bb4: { 1 } 
label_4: { 1 } 
label_7 is a Caloric Connector
label_7: { 1 } 
sw.bb3: 
label_3: 
sw.bb2: 
label_2: 
sw.bb: 
label_1: 
sw.default: 
label_6: 
end is a Caloric Connector
end: { 1 } 
if.else: { 1 } 
if.then: 
if.end is a Caloric Connector
if.end: { 1 } 
----------===Initiating Tau Insertion Algroithm===----------
Inserted Tau at : label_7
Reached the Dominance frontier while visiting from: sw.bb3
Inserted Tau at : label_7
Reached the Dominance frontier while visiting from: sw.bb3
Inserted Tau at : end
Inserted Tau at : if.end
Inserted Tau at : end
Inserted Tau at : if.end
-- BB: entry
---- I: ---- attempt to renaming uses in I
------ Not a phi instruction
------ Not a tau instruction
---- I: ---- attempt to renaming uses in I
------ Not a phi instruction
------ Not a tau instruction
---- I: ---- attempt to renaming uses in I
------ Not a phi instruction
------ Not a tau instruction
------ Succesor Logic
-------- Succ: start
------ Recurse over Child 
-------- Parent: entry | Child: start
-- BB: start
---- I: ---- attempt to renaming uses in I
------ Not a phi instruction
------ Not a tau instruction
---- I: ---- attempt to renaming uses in I
------ Not a phi instruction
------ Not a tau instruction
---- I: ---- attempt to renaming uses in I
------ Not a phi instruction
------ Not a tau instruction
---- I: ---- attempt to renaming uses in I
------ Not a phi instruction
------ Not a tau instruction
------ Succesor Logic
-------- Succ: sw.default
-------- Succ: sw.bb
-------- Succ: sw.bb2
-------- Succ: sw.bb3
-------- Succ: sw.bb4
-------- Succ: sw.bb5
-------- Succ: sw.bb6
------ Recurse over Child 
-------- Parent: start | Child: sw.default
-- BB: sw.default
---- I: ---- attempt to renaming uses in I
------ Not a phi instruction
------ Not a tau instruction
------ Succesor Logic
-------- Succ: label_6
------ Recurse over Child 
-------- Parent: sw.default | Child: label_6
-- BB: label_6
---- I: ---- attempt to renaming uses in I
------ Not a phi instruction
------ Not a tau instruction
---- I: ---- attempt to renaming uses in I
------ Not a phi instruction
------ Not a tau instruction
------ Succesor Logic
-------- Succ: end
---------- phi: e.1
---------- V: 
---------- Not a phi operand
---------- Not a tau operand
---------- phi: b.1
---------- V: 
---------- Not a phi operand
---------- Not a tau operand
------ Recurse over Child 
------ Remove definitions if needed
------ Remove definitions if needed
-------- Parent: start | Child: end
-- BB: end
---- I: ---- attempt to renaming uses in I
------ a phi instruction
------ Not a tau instruction
---- I: ---- attempt to renaming uses in I
------ phi: e.1
------ e.1
------ mrd: e.1
------ a phi instruction
------ Not a tau instruction
---- I: ---- attempt to renaming uses in I
------ phi: e.1
------ e.1
------ mrd: e.1
------ phi: b.1
------ b.1
------ mrd: b.1
------ Not a phi instruction
------ a tau instruction
---- I: ---- attempt to renaming uses in I
------ phi: e.1
------ e.1
------ mrd: e.1
------ phi: b.1
------ tau4
------ mrd: tau4
------ Not a phi instruction
------ a tau instruction
---- I: ---- attempt to renaming uses in I
------ phi: e.1
------ tau2
------ mrd: tau2
------ phi: b.1
------ tau4
------ mrd: tau4
------ Not a phi instruction
------ Not a tau instruction
---- I: ---- attempt to renaming uses in I
------ phi: e.1
------ tau2
------ mrd: tau2
------ phi: b.1
------ tau4
------ mrd: tau4
------ Not a phi instruction
------ Not a tau instruction
---- I: ---- attempt to renaming uses in I
------ phi: e.1
------ tau2
------ mrd: tau2
------ phi: b.1
------ tau4
------ mrd: tau4
------ Not a phi instruction
------ Not a tau instruction
---- I: ---- attempt to renaming uses in I
------ phi: e.1
------ tau2
------ mrd: tau2
------ phi: b.1
------ tau4
------ mrd: tau4
------ Not a phi instruction
------ Not a tau instruction
---- I: ---- attempt to renaming uses in I
------ phi: e.1
------ tau2
------ mrd: tau2
------ phi: b.1
------ tau4
------ mrd: tau4
------ Not a phi instruction
------ Not a tau instruction
------ Succesor Logic
-------- Succ: if.then
-------- Succ: if.else
------ Recurse over Child 
-------- Parent: end | Child: if.then
-- BB: if.then
---- I: ---- attempt to renaming uses in I
------ phi: e.1
------ tau2
------ mrd: tau2
------ phi: b.1
------ tau4
------ mrd: tau4
------ Not a phi instruction
------ Not a tau instruction
---- I: ---- attempt to renaming uses in I
------ phi: e.1
------ tau2
------ mrd: tau2
------ phi: b.1
------ tau4
------ mrd: tau4
------ Not a phi instruction
------ Not a tau instruction
---- I: ---- attempt to renaming uses in I
------ phi: e.1
------ tau2
------ mrd: tau2
------ phi: b.1
------ tau4
------ mrd: tau4
------ Not a phi instruction
------ Not a tau instruction
---- I: ---- attempt to renaming uses in I
------ phi: e.1
------ tau2
------ mrd: tau2
------ phi: b.1
------ tau4
------ mrd: tau4
------ Not a phi instruction
------ Not a tau instruction
------ Succesor Logic
-------- Succ: if.end
------ Recurse over Child 
------ Remove definitions if needed
-------- phi: e.1 mrd: tau2
---------- mrd not changed
-------- phi: b.1 mrd: tau4
---------- mrd not changed
-------- Parent: end | Child: if.end
-- BB: if.end
---- I: ---- attempt to renaming uses in I
------ phi: e.1
------ tau2
------ mrd: tau2
------ phi: b.1
------ tau4
------ mrd: tau4
------ Not a phi instruction
------ a tau instruction
---- I: ---- attempt to renaming uses in I
------ phi: e.1
------ tau2
------ mrd: tau2
------ phi: b.1
------ tau5
------ mrd: tau5
------ Not a phi instruction
------ a tau instruction
---- I: ---- attempt to renaming uses in I
------ phi: e.1
------ tau3
------ mrd: tau3
------ phi: b.1
------ tau5
------ mrd: tau5
------ Not a phi instruction
------ Not a tau instruction
---- I: ---- attempt to renaming uses in I
------ phi: e.1
------ tau3
------ mrd: tau3
------ phi: b.1
------ tau5
------ mrd: tau5
------ Not a phi instruction
------ Not a tau instruction
---- I: ---- attempt to renaming uses in I
------ phi: e.1
------ tau3
------ mrd: tau3
------ phi: b.1
------ tau5
------ mrd: tau5
------ Not a phi instruction
------ Not a tau instruction
------ Succesor Logic
------ Recurse over Child 
------ Remove definitions if needed
-------- phi: e.1 mrd: tau3
---------- mrd changed
-------- phi: b.1 mrd: tau5
---------- mrd changed
-------- Parent: end | Child: if.else
-- BB: if.else
---- I: ---- attempt to renaming uses in I
------ phi: e.1
------ tau2
------ mrd: tau2
------ phi: b.1
------ tau4
------ mrd: tau4
------ Not a phi instruction
------ Not a tau instruction
---- I: ---- attempt to renaming uses in I
------ phi: e.1
------ tau2
------ mrd: tau2
------ phi: b.1
------ tau4
------ mrd: tau4
------ Not a phi instruction
------ Not a tau instruction
---- I: ---- attempt to renaming uses in I
------ phi: e.1
------ tau2
------ mrd: tau2
------ phi: b.1
------ tau4
------ mrd: tau4
------ Not a phi instruction
------ Not a tau instruction
---- I: ---- attempt to renaming uses in I
------ phi: e.1
------ tau2
------ mrd: tau2
------ phi: b.1
------ tau4
------ mrd: tau4
------ Not a phi instruction
------ Not a tau instruction
------ Succesor Logic
-------- Succ: if.end
------ Recurse over Child 
------ Remove definitions if needed
-------- phi: e.1 mrd: tau2
---------- mrd not changed
-------- phi: b.1 mrd: tau4
---------- mrd not changed
------ Remove definitions if needed
-------- phi: e.1 mrd: tau2
---------- mrd changed
-------- phi: b.1 mrd: tau4
---------- mrd changed
-------- Parent: start | Child: sw.bb
-- BB: sw.bb
---- I: ---- attempt to renaming uses in I
------ phi: e.1
------ e.1
------ mrd: e.1
------ phi: b.1
------ b.1
------ mrd: b.1
------ Not a phi instruction
------ Not a tau instruction
------ Succesor Logic
-------- Succ: label_1
------ Recurse over Child 
-------- Parent: sw.bb | Child: label_1
-- BB: label_1
---- I: ---- attempt to renaming uses in I
------ phi: e.1
------ e.1
------ mrd: e.1
------ phi: b.1
------ b.1
------ mrd: b.1
------ Not a phi instruction
------ Not a tau instruction
---- I: ---- attempt to renaming uses in I
------ phi: e.1
------ e.1
------ mrd: e.1
------ phi: b.1
------ b.1
------ mrd: b.1
------ Not a phi instruction
------ Not a tau instruction
------ Succesor Logic
-------- Succ: end
---------- phi: e.1
---------- V: 
---------- Not a phi operand
---------- Not a tau operand
---------- phi: b.1
---------- V: 
---------- Not a phi operand
---------- Not a tau operand
------ Recurse over Child 
------ Remove definitions if needed
-------- phi: e.1 mrd: e.1
---------- mrd not changed
-------- phi: b.1 mrd: b.1
---------- mrd not changed
------ Remove definitions if needed
-------- phi: e.1 mrd: e.1
---------- mrd not changed
-------- phi: b.1 mrd: b.1
---------- mrd not changed
-------- Parent: start | Child: sw.bb2
-- BB: sw.bb2
---- I: ---- attempt to renaming uses in I
------ phi: e.1
------ e.1
------ mrd: e.1
------ phi: b.1
------ b.1
------ mrd: b.1
------ Not a phi instruction
------ Not a tau instruction
------ Succesor Logic
-------- Succ: label_2
------ Recurse over Child 
-------- Parent: sw.bb2 | Child: label_2
-- BB: label_2
---- I: ---- attempt to renaming uses in I
------ phi: e.1
------ e.1
------ mrd: e.1
------ phi: b.1
------ b.1
------ mrd: b.1
------ Not a phi instruction
------ Not a tau instruction
---- I: ---- attempt to renaming uses in I
------ phi: e.1
------ e.1
------ mrd: e.1
------ phi: b.1
------ b.1
------ mrd: b.1
------ Not a phi instruction
------ Not a tau instruction
------ Succesor Logic
-------- Succ: end
---------- phi: e.1
---------- V: 
---------- Not a phi operand
---------- Not a tau operand
---------- phi: b.1
---------- V: 
---------- Not a phi operand
---------- Not a tau operand
------ Recurse over Child 
------ Remove definitions if needed
-------- phi: e.1 mrd: e.1
---------- mrd not changed
-------- phi: b.1 mrd: b.1
---------- mrd not changed
------ Remove definitions if needed
-------- phi: e.1 mrd: e.1
---------- mrd not changed
-------- phi: b.1 mrd: b.1
---------- mrd not changed
-------- Parent: start | Child: sw.bb3
-- BB: sw.bb3
---- I: ---- attempt to renaming uses in I
------ phi: e.1
------ e.1
------ mrd: e.1
------ phi: b.1
------ b.1
------ mrd: b.1
------ Not a phi instruction
------ Not a tau instruction
------ Succesor Logic
-------- Succ: label_3
------ Recurse over Child 
-------- Parent: sw.bb3 | Child: label_3
-- BB: label_3
---- I: ---- attempt to renaming uses in I
------ phi: e.1
------ e.1
------ mrd: e.1
------ phi: b.1
------ b.1
------ mrd: b.1
------ Not a phi instruction
------ Not a tau instruction
---- I: ---- attempt to renaming uses in I
------ phi: e.1
------ e.1
------ mrd: e.1
------ phi: b.1
------ b.1
------ mrd: b.1
------ Not a phi instruction
------ Not a tau instruction
------ Succesor Logic
-------- Succ: end
---------- phi: e.1
---------- V: 
---------- Not a phi operand
---------- Not a tau operand
---------- phi: b.1
---------- V: 
---------- Not a phi operand
---------- Not a tau operand
------ Recurse over Child 
------ Remove definitions if needed
-------- phi: e.1 mrd: e.1
---------- mrd not changed
-------- phi: b.1 mrd: b.1
---------- mrd not changed
------ Remove definitions if needed
-------- phi: e.1 mrd: e.1
---------- mrd not changed
-------- phi: b.1 mrd: b.1
---------- mrd not changed
-------- Parent: start | Child: sw.bb4
-- BB: sw.bb4
---- I: ---- attempt to renaming uses in I
------ phi: e.1
------ e.1
------ mrd: e.1
------ phi: b.1
------ b.1
------ mrd: b.1
------ Not a phi instruction
------ Not a tau instruction
------ Succesor Logic
-------- Succ: label_4
------ Recurse over Child 
-------- Parent: sw.bb4 | Child: label_4
-- BB: label_4
---- I: ---- attempt to renaming uses in I
------ phi: e.1
------ e.1
------ mrd: e.1
------ phi: b.1
------ b.1
------ mrd: b.1
------ Not a phi instruction
------ Not a tau instruction
---- I: ---- attempt to renaming uses in I
------ phi: e.1
------ e.1
------ mrd: e.1
------ phi: b.1
------ b.1
------ mrd: b.1
------ Not a phi instruction
------ Not a tau instruction
---- I: ---- attempt to renaming uses in I
------ phi: e.1
------ e.1
------ mrd: e.1
------ phi: b.1
------ b.1
------ mrd: b.1
------ Not a phi instruction
------ Not a tau instruction
---- I: ---- attempt to renaming uses in I
------ phi: e.1
------ e.1
------ mrd: e.1
------ phi: b.1
------ b.1
------ mrd: b.1
------ Not a phi instruction
------ Not a tau instruction
------ Succesor Logic
-------- Succ: label_7
---------- phi: e.0
---------- V: add
---------- Not a phi operand
---------- Not a tau operand
---------- phi: b.0
---------- V: 
---------- Not a phi operand
---------- Not a tau operand
------ Recurse over Child 
------ Remove definitions if needed
-------- phi: e.1 mrd: e.1
---------- mrd not changed
-------- phi: b.1 mrd: b.1
---------- mrd not changed
------ Remove definitions if needed
-------- phi: e.1 mrd: e.1
---------- mrd not changed
-------- phi: b.1 mrd: b.1
---------- mrd not changed
-------- Parent: start | Child: label_7
-- BB: label_7
---- I: ---- attempt to renaming uses in I
------ phi: e.1
------ e.1
------ mrd: e.1
------ phi: b.1
------ b.1
------ mrd: b.1
------ a phi instruction
------ Not a tau instruction
---- I: ---- attempt to renaming uses in I
------ phi: e.0
------ e.0
------ mrd: e.0
------ phi: e.1
------ e.1
------ mrd: e.1
------ phi: b.1
------ b.1
------ mrd: b.1
------ a phi instruction
------ Not a tau instruction
---- I: ---- attempt to renaming uses in I
------ phi: e.0
------ e.0
------ mrd: e.0
------ phi: b.0
------ b.0
------ mrd: b.0
------ phi: e.1
------ e.1
------ mrd: e.1
------ phi: b.1
------ b.1
------ mrd: b.1
------ Not a phi instruction
------ a tau instruction
---- I: ---- attempt to renaming uses in I
------ phi: e.0
------ e.0
------ mrd: e.0
------ phi: b.0
------ tau1
------ mrd: tau1
------ phi: e.1
------ e.1
------ mrd: e.1
------ phi: b.1
------ b.1
------ mrd: b.1
------ Not a phi instruction
------ a tau instruction
---- I: ---- attempt to renaming uses in I
------ phi: e.0
------ tau
------ mrd: tau
------ phi: b.0
------ tau1
------ mrd: tau1
------ phi: e.1
------ e.1
------ mrd: e.1
------ phi: b.1
------ b.1
------ mrd: b.1
------ Not a phi instruction
------ Not a tau instruction
---- I: ---- attempt to renaming uses in I
------ phi: e.0
------ tau
------ mrd: tau
------ phi: b.0
------ tau1
------ mrd: tau1
------ phi: e.1
------ e.1
------ mrd: e.1
------ phi: b.1
------ b.1
------ mrd: b.1
------ Not a phi instruction
------ Not a tau instruction
---- I: ---- attempt to renaming uses in I
------ phi: e.0
------ tau
------ mrd: tau
------ phi: b.0
------ tau1
------ mrd: tau1
------ phi: e.1
------ e.1
------ mrd: e.1
------ phi: b.1
------ b.1
------ mrd: b.1
------ Not a phi instruction
------ Not a tau instruction
------ Succesor Logic
-------- Succ: end
---------- phi: e.1
---------- V: e.0
---------- a phi operand
---------- Not a tau operand
---------- phi: b.1
---------- V: b.0
---------- a phi operand
---------- Not a tau operand
------ Recurse over Child 
------ Remove definitions if needed
-------- phi: e.0 mrd: tau
---------- mrd changed
-------- phi: b.0 mrd: tau1
---------- mrd changed
-------- phi: e.1 mrd: e.1
---------- mrd not changed
-------- phi: b.1 mrd: b.1
---------- mrd not changed
-------- Parent: start | Child: sw.bb5
-- BB: sw.bb5
---- I: ---- attempt to renaming uses in I
------ phi: e.0
------ e.0
------ mrd: e.0
------ phi: b.0
------ b.0
------ mrd: b.0
------ phi: e.1
------ e.1
------ mrd: e.1
------ phi: b.1
------ b.1
------ mrd: b.1
------ Not a phi instruction
------ Not a tau instruction
------ Succesor Logic
-------- Succ: label_5
------ Recurse over Child 
-------- Parent: sw.bb5 | Child: label_5
-- BB: label_5
---- I: ---- attempt to renaming uses in I
------ phi: e.0
------ e.0
------ mrd: e.0
------ phi: b.0
------ b.0
------ mrd: b.0
------ phi: e.1
------ e.1
------ mrd: e.1
------ phi: b.1
------ b.1
------ mrd: b.1
------ Not a phi instruction
------ Not a tau instruction
---- I: ---- attempt to renaming uses in I
------ phi: e.0
------ e.0
------ mrd: e.0
------ phi: b.0
------ b.0
------ mrd: b.0
------ phi: e.1
------ e.1
------ mrd: e.1
------ phi: b.1
------ b.1
------ mrd: b.1
------ Not a phi instruction
------ Not a tau instruction
---- I: ---- attempt to renaming uses in I
------ phi: e.0
------ e.0
------ mrd: e.0
------ phi: b.0
------ b.0
------ mrd: b.0
------ phi: e.1
------ e.1
------ mrd: e.1
------ phi: b.1
------ b.1
------ mrd: b.1
------ Not a phi instruction
------ Not a tau instruction
---- I: ---- attempt to renaming uses in I
------ phi: e.0
------ e.0
------ mrd: e.0
------ phi: b.0
------ b.0
------ mrd: b.0
------ phi: e.1
------ e.1
------ mrd: e.1
------ phi: b.1
------ b.1
------ mrd: b.1
------ Not a phi instruction
------ Not a tau instruction
---- I: ---- attempt to renaming uses in I
------ phi: e.0
------ e.0
------ mrd: e.0
------ phi: b.0
------ b.0
------ mrd: b.0
------ phi: e.1
------ e.1
------ mrd: e.1
------ phi: b.1
------ b.1
------ mrd: b.1
------ Not a phi instruction
------ Not a tau instruction
------ Succesor Logic
-------- Succ: label_7
---------- phi: e.0
---------- V: 
---------- Not a phi operand
---------- Not a tau operand
---------- phi: b.0
---------- V: 
---------- Not a phi operand
---------- Not a tau operand
------ Recurse over Child 
------ Remove definitions if needed
-------- phi: e.0 mrd: e.0
---------- mrd not changed
-------- phi: b.0 mrd: b.0
---------- mrd not changed
-------- phi: e.1 mrd: e.1
---------- mrd not changed
-------- phi: b.1 mrd: b.1
---------- mrd not changed
------ Remove definitions if needed
-------- phi: e.0 mrd: e.0
---------- mrd not changed
-------- phi: b.0 mrd: b.0
---------- mrd not changed
-------- phi: e.1 mrd: e.1
---------- mrd not changed
-------- phi: b.1 mrd: b.1
---------- mrd not changed
-------- Parent: start | Child: sw.bb6
-- BB: sw.bb6
---- I: ---- attempt to renaming uses in I
------ phi: e.0
------ e.0
------ mrd: e.0
------ phi: b.0
------ b.0
------ mrd: b.0
------ phi: e.1
------ e.1
------ mrd: e.1
------ phi: b.1
------ b.1
------ mrd: b.1
------ Not a phi instruction
------ Not a tau instruction
------ Succesor Logic
-------- Succ: label_8
------ Recurse over Child 
-------- Parent: sw.bb6 | Child: label_8
-- BB: label_8
---- I: ---- attempt to renaming uses in I
------ phi: e.0
------ e.0
------ mrd: e.0
------ phi: b.0
------ b.0
------ mrd: b.0
------ phi: e.1
------ e.1
------ mrd: e.1
------ phi: b.1
------ b.1
------ mrd: b.1
------ Not a phi instruction
------ Not a tau instruction
---- I: ---- attempt to renaming uses in I
------ phi: e.0
------ e.0
------ mrd: e.0
------ phi: b.0
------ b.0
------ mrd: b.0
------ phi: e.1
------ e.1
------ mrd: e.1
------ phi: b.1
------ b.1
------ mrd: b.1
------ Not a phi instruction
------ Not a tau instruction
---- I: ---- attempt to renaming uses in I
------ phi: e.0
------ e.0
------ mrd: e.0
------ phi: b.0
------ b.0
------ mrd: b.0
------ phi: e.1
------ e.1
------ mrd: e.1
------ phi: b.1
------ b.1
------ mrd: b.1
------ Not a phi instruction
------ Not a tau instruction
---- I: ---- attempt to renaming uses in I
------ phi: e.0
------ e.0
------ mrd: e.0
------ phi: b.0
------ b.0
------ mrd: b.0
------ phi: e.1
------ e.1
------ mrd: e.1
------ phi: b.1
------ b.1
------ mrd: b.1
------ Not a phi instruction
------ Not a tau instruction
---- I: ---- attempt to renaming uses in I
------ phi: e.0
------ e.0
------ mrd: e.0
------ phi: b.0
------ b.0
------ mrd: b.0
------ phi: e.1
------ e.1
------ mrd: e.1
------ phi: b.1
------ b.1
------ mrd: b.1
------ Not a phi instruction
------ Not a tau instruction
------ Succesor Logic
-------- Succ: label_7
---------- phi: e.0
---------- V: 
---------- Not a phi operand
---------- Not a tau operand
---------- phi: b.0
---------- V: 
---------- Not a phi operand
---------- Not a tau operand
------ Recurse over Child 
------ Remove definitions if needed
-------- phi: e.0 mrd: e.0
---------- mrd not changed
-------- phi: b.0 mrd: b.0
---------- mrd not changed
-------- phi: e.1 mrd: e.1
---------- mrd not changed
-------- phi: b.1 mrd: b.1
---------- mrd not changed
------ Remove definitions if needed
-------- phi: e.0 mrd: e.0
---------- mrd not changed
-------- phi: b.0 mrd: b.0
---------- mrd not changed
-------- phi: e.1 mrd: e.1
---------- mrd not changed
-------- phi: b.1 mrd: b.1
---------- mrd not changed
------ Remove definitions if needed
-------- phi: e.0 mrd: e.0
---------- mrd not changed
-------- phi: b.0 mrd: b.0
---------- mrd not changed
-------- phi: e.1 mrd: e.1
---------- mrd not changed
-------- phi: b.1 mrd: b.1
---------- mrd not changed
------ Remove definitions if needed
-------- phi: e.0 mrd: e.0
---------- mrd not changed
-------- phi: b.0 mrd: b.0
---------- mrd not changed
-------- phi: e.1 mrd: e.1
---------- mrd not changed
-------- phi: b.1 mrd: b.1
---------- mrd not changed
SCCP on function 'main'
Marking Block Executable: entry

Popped off BBWL: 
entry:
  %a = alloca i32, align 4
  %c = alloca i32, align 4
  br label %start

SCCP: Don't know how to handle:   %a = alloca i32, align 4
markOverdefined:   %a = alloca i32, align 4
SCCP: Don't know how to handle:   %c = alloca i32, align 4
markOverdefined:   %c = alloca i32, align 4
Marking Block Executable: start

Popped off BBWL: 
start:                                            ; preds = %entry
  %call = call nonnull align 8 dereferenceable(16) %"class.std::basic_istream"* @_ZNSirsERi(%"class.std::basic_istream"* nonnull align 8 dereferenceable(16) @_ZSt3cin, i32* nonnull align 4 dereferenceable(4) %a)
  %call1 = call nonnull align 8 dereferenceable(16) %"class.std::basic_istream"* @_ZNSirsERi(%"class.std::basic_istream"* nonnull align 8 dereferenceable(16) %call, i32* nonnull align 4 dereferenceable(4) %c)
  %i = load i32, i32* %c, align 4
  switch i32 %i, label %sw.default [
    i32 1, label %sw.bb
    i32 2, label %sw.bb2
    i32 3, label %sw.bb3
    i32 4, label %sw.bb4
    i32 5, label %sw.bb5
    i32 6, label %sw.bb6
  ]

Merged overdefined into   %call = call nonnull align 8 dereferenceable(16) %"class.std::basic_istream"* @_ZNSirsERi(%"class.std::basic_istream"* nonnull align 8 dereferenceable(16) @_ZSt3cin, i32* nonnull align 4 dereferenceable(4) %a) : overdefined
Merged overdefined into   %call1 = call nonnull align 8 dereferenceable(16) %"class.std::basic_istream"* @_ZNSirsERi(%"class.std::basic_istream"* nonnull align 8 dereferenceable(16) %call, i32* nonnull align 4 dereferenceable(4) %c) : overdefined
Merged overdefined into   %i = load i32, i32* %c, align 4 : overdefined
Marking Block Executable: sw.default
Marking Block Executable: sw.bb
Marking Block Executable: sw.bb2
Marking Block Executable: sw.bb3
Marking Block Executable: sw.bb4
Marking Block Executable: sw.bb5
Marking Block Executable: sw.bb6

Popped off BBWL: 
sw.bb6:                                           ; preds = %start
  br label %label_8

Marking Block Executable: label_8

Popped off BBWL: 
label_8:                                          ; preds = %sw.bb6
  store i32 110, i32* %a, align 4
  %i3 = load i32, i32* %a, align 4
  %add8 = add nsw i32 %i3, 1
  store i32 %add8, i32* %a, align 4
  br label %label_7

Merged overdefined into   %i3 = load i32, i32* %a, align 4 : overdefined
Merged overdefined into   %add8 = add nsw i32 %i3, 1 : overdefined
Marking Block Executable: label_7

Popped off BBWL: 
label_7:                                          ; preds = %label_8, %label_5, %label_4
  %e.0 = phi i32 [ 0, %label_8 ], [ 0, %label_5 ], [ %add, %label_4 ]
  %b.0 = phi i32 [ -11, %label_8 ], [ 13, %label_5 ], [ 90, %label_4 ]
  %tau1 = call i32 (...) @llvm.tau.i32(i32 %b.0, i32 90)
  %tau = call i32 (...) @llvm.tau.i32(i32 %e.0, i32 %add)
  %i4 = load i32, i32* %a, align 4
  %add9 = add nsw i32 %i4, %tau
  br label %end

Marking PHINode exec.
Merged constantrange<0, 1> into   %e.0 = phi i32 [ 0, %label_8 ], [ 0, %label_5 ], [ %add, %label_4 ] : constantrange<0, 1>
Marking PHINode exec.
Merged constantrange<-11, -10> into   %b.0 = phi i32 [ -11, %label_8 ], [ 13, %label_5 ], [ 90, %label_4 ] : constantrange<-11, -10>
Merged overdefined into   %i4 = load i32, i32* %a, align 4 : overdefined
Marking Block Executable: end

Popped off BBWL: 
end:                                              ; preds = %label_6, %label_7, %label_3, %label_2, %label_1
  %e.1 = phi i32 [ 0, %label_6 ], [ %tau, %label_7 ], [ 0, %label_3 ], [ 0, %label_2 ], [ 90, %label_1 ]
  %b.1 = phi i32 [ 77, %label_6 ], [ %tau1, %label_7 ], [ 50, %label_3 ], [ 60, %label_2 ], [ 70, %label_1 ]
  %tau4 = call i32 (...) @llvm.tau.i32(i32 %b.1, i32 %b.0)
  %tau2 = call i32 (...) @llvm.tau.i32(i32 %e.1, i32 %e.0)
  %add10 = add nsw i32 %tau2, 10
  %i7 = load i32, i32* %a, align 4
  %add11 = add nsw i32 %i7, %tau4
  %cmp = icmp sge i32 %add11, 100
  br i1 %cmp, label %if.then, label %if.else

Marking PHINode exec.
Marking PHINode exec.
Merged overdefined into   %i7 = load i32, i32* %a, align 4 : overdefined

Popped off BBWL: 
sw.bb5:                                           ; preds = %start
  br label %label_5

Marking Block Executable: label_5

Popped off BBWL: 
label_5:                                          ; preds = %sw.bb5
  store i32 86, i32* %a, align 4
  %i2 = load i32, i32* %a, align 4
  %add7 = add nsw i32 %i2, 1
  store i32 %add7, i32* %a, align 4
  br label %label_7

Merged overdefined into   %i2 = load i32, i32* %a, align 4 : overdefined
Merged overdefined into   %add7 = add nsw i32 %i2, 1 : overdefined
Marking Edge Executable: label_5 -> label_7
		Visiting Tau Instruction
		Speculative Operand : , constantrange<90, 91>
		Speculative Operand : llvm.tau.i32, constant<; Function Attrs: nofree nosync nounwind willreturn
declare i32 @llvm.tau.i32(...) #5
>
Merged overdefined into   %tau1 = call i32 (...) @llvm.tau.i32(i32 %b.0, i32 90) : overdefined
		ValueLattice (TauState) : overdefined
		Visiting Tau Instruction
		Speculative Operand : add, unknown
		Speculative Operand : llvm.tau.i32, constant<; Function Attrs: nofree nosync nounwind willreturn
declare i32 @llvm.tau.i32(...) #5
>
Merged constant<; Function Attrs: nofree nosync nounwind willreturn
declare i32 @llvm.tau.i32(...) #5
> into   %tau = call i32 (...) @llvm.tau.i32(i32 %e.0, i32 %add) : constant<; Function Attrs: nofree nosync nounwind willreturn
declare i32 @llvm.tau.i32(...) #5
>
		ValueLattice (TauState) : constant<; Function Attrs: nofree nosync nounwind willreturn
declare i32 @llvm.tau.i32(...) #5
>
Marking PHINode exec.
Marking PHINode exec.
Merged constantrange<-11, 14> into   %b.0 = phi i32 [ -11, %label_8 ], [ 13, %label_5 ], [ 90, %label_4 ] : constantrange<-11, 14>

Popped off BBWL: 
sw.bb4:                                           ; preds = %start
  br label %label_4

Marking Block Executable: label_4

Popped off BBWL: 
label_4:                                          ; preds = %sw.bb4
  store i32 10, i32* %a, align 4
  %i1 = load i32, i32* %a, align 4
  %add = add nsw i32 %i1, 30
  br label %label_7

Merged overdefined into   %i1 = load i32, i32* %a, align 4 : overdefined
Merged overdefined into   %add = add nsw i32 %i1, 30 : overdefined
Marking Edge Executable: label_4 -> label_7
		Visiting Tau Instruction
		Speculative Operand : , constantrange<90, 91>
		ValueLattice (TauState) : overdefined
		Visiting Tau Instruction
		Speculative Operand : add, overdefined
Merged overdefined into   %tau = call i32 (...) @llvm.tau.i32(i32 %e.0, i32 %add) : overdefined
		ValueLattice (TauState) : overdefined
Marking PHINode exec.
Merged overdefined into   %e.0 = phi i32 [ 0, %label_8 ], [ 0, %label_5 ], [ %add, %label_4 ] : overdefined
Marking PHINode exec.
Merged constantrange<-11, 91> into   %b.0 = phi i32 [ -11, %label_8 ], [ 13, %label_5 ], [ 90, %label_4 ] : constantrange<-11, 91>

Popped off BBWL: 
sw.bb3:                                           ; preds = %start
  br label %label_3

Marking Block Executable: label_3

Popped off BBWL: 
label_3:                                          ; preds = %sw.bb3
  store i32 50, i32* %a, align 4
  br label %end

Marking Edge Executable: label_3 -> end
		Visiting Tau Instruction
		Speculative Operand : b.0, constantrange<-11, 91>
		Speculative Operand : llvm.tau.i32, constant<; Function Attrs: nofree nosync nounwind willreturn
declare i32 @llvm.tau.i32(...) #5
>
Merged overdefined into   %tau4 = call i32 (...) @llvm.tau.i32(i32 %b.1, i32 %b.0) : overdefined
		ValueLattice (TauState) : overdefined
		Visiting Tau Instruction
		Speculative Operand : e.0, overdefined
Merged overdefined into   %tau2 = call i32 (...) @llvm.tau.i32(i32 %e.1, i32 %e.0) : overdefined
		ValueLattice (TauState) : overdefined
Marking PHINode exec.
Merged overdefined into   %e.1 = phi i32 [ 0, %label_6 ], [ %tau, %label_7 ], [ 0, %label_3 ], [ 0, %label_2 ], [ 90, %label_1 ] : overdefined
Marking PHINode exec.
Merged overdefined into   %b.1 = phi i32 [ 77, %label_6 ], [ %tau1, %label_7 ], [ 50, %label_3 ], [ 60, %label_2 ], [ 70, %label_1 ] : overdefined

Popped off BBWL: 
sw.bb2:                                           ; preds = %start
  br label %label_2

Marking Block Executable: label_2

Popped off BBWL: 
label_2:                                          ; preds = %sw.bb2
  store i32 40, i32* %a, align 4
  br label %end

Marking Edge Executable: label_2 -> end
		Visiting Tau Instruction
		Speculative Operand : b.0, constantrange<-11, 91>
		ValueLattice (TauState) : overdefined
		Visiting Tau Instruction
		Speculative Operand : e.0, overdefined
		ValueLattice (TauState) : overdefined
Marking PHINode exec.
Marking PHINode exec.

Popped off BBWL: 
sw.bb:                                            ; preds = %start
  br label %label_1

Marking Block Executable: label_1

Popped off BBWL: 
label_1:                                          ; preds = %sw.bb
  store i32 30, i32* %a, align 4
  br label %end

Marking Edge Executable: label_1 -> end
		Visiting Tau Instruction
		Speculative Operand : b.0, constantrange<-11, 91>
		ValueLattice (TauState) : overdefined
		Visiting Tau Instruction
		Speculative Operand : e.0, overdefined
		ValueLattice (TauState) : overdefined
Marking PHINode exec.
Marking PHINode exec.

Popped off BBWL: 
sw.default:                                       ; preds = %start
  br label %label_6

Marking Block Executable: label_6

Popped off BBWL: 
label_6:                                          ; preds = %sw.default
  store i32 23, i32* %a, align 4
  br label %end

Marking Edge Executable: label_6 -> end
		Visiting Tau Instruction
		Speculative Operand : b.0, constantrange<-11, 91>
		ValueLattice (TauState) : overdefined
		Visiting Tau Instruction
		Speculative Operand : e.0, overdefined
		ValueLattice (TauState) : overdefined
Marking PHINode exec.
Marking PHINode exec.

Popped off OI-WL:   %b.1 = phi i32 [ 77, %label_6 ], [ %tau1, %label_7 ], [ 50, %label_3 ], [ 60, %label_2 ], [ 70, %label_1 ]

Popped off OI-WL:   %e.1 = phi i32 [ 0, %label_6 ], [ %tau, %label_7 ], [ 0, %label_3 ], [ 0, %label_2 ], [ 90, %label_1 ]

Popped off OI-WL:   %tau2 = call i32 (...) @llvm.tau.i32(i32 %e.1, i32 %e.0)
Merged overdefined into   %add10 = add nsw i32 %tau2, 10 : overdefined

Popped off OI-WL:   %add10 = add nsw i32 %tau2, 10

Popped off OI-WL:   %tau4 = call i32 (...) @llvm.tau.i32(i32 %b.1, i32 %b.0)
markOverdefined:   %add11 = add nsw i32 %i7, %tau4

Popped off OI-WL:   %add11 = add nsw i32 %i7, %tau4
markOverdefined:   %cmp = icmp sge i32 %add11, 100

Popped off OI-WL:   %cmp = icmp sge i32 %add11, 100
Marking Block Executable: if.then
Marking Block Executable: if.else

Popped off OI-WL:   %e.0 = phi i32 [ 0, %label_8 ], [ 0, %label_5 ], [ %add, %label_4 ]

Popped off OI-WL:   %tau = call i32 (...) @llvm.tau.i32(i32 %e.0, i32 %add)
Marking PHINode exec.
markOverdefined:   %add9 = add nsw i32 %i4, %tau

Popped off OI-WL:   %add9 = add nsw i32 %i4, %tau

Popped off OI-WL:   %add = add nsw i32 %i1, 30
Marking PHINode exec.

Popped off OI-WL:   %i1 = load i32, i32* %a, align 4

Popped off OI-WL:   %tau1 = call i32 (...) @llvm.tau.i32(i32 %b.0, i32 90)
Marking PHINode exec.

Popped off OI-WL:   %add7 = add nsw i32 %i2, 1

Popped off OI-WL:   %i2 = load i32, i32* %a, align 4

Popped off OI-WL:   %i7 = load i32, i32* %a, align 4

Popped off OI-WL:   %i4 = load i32, i32* %a, align 4

Popped off OI-WL:   %add8 = add nsw i32 %i3, 1

Popped off OI-WL:   %i3 = load i32, i32* %a, align 4

Popped off OI-WL:   %i = load i32, i32* %c, align 4

Popped off OI-WL:   %call1 = call nonnull align 8 dereferenceable(16) %"class.std::basic_istream"* @_ZNSirsERi(%"class.std::basic_istream"* nonnull align 8 dereferenceable(16) %call, i32* nonnull align 4 dereferenceable(4) %c)

Popped off OI-WL:   %call = call nonnull align 8 dereferenceable(16) %"class.std::basic_istream"* @_ZNSirsERi(%"class.std::basic_istream"* nonnull align 8 dereferenceable(16) @_ZSt3cin, i32* nonnull align 4 dereferenceable(4) %a)

Popped off OI-WL:   %c = alloca i32, align 4

Popped off OI-WL:   %a = alloca i32, align 4
Merged overdefined into   %i11 = load i32, i32* %a, align 4 : overdefined
Merged overdefined into   %i10 = load i32, i32* %a, align 4 : overdefined

Popped off OI-WL:   %i10 = load i32, i32* %a, align 4
Merged overdefined into   %add12 = add nsw i32 %i10, 190 : overdefined

Popped off OI-WL:   %add12 = add nsw i32 %i10, 190

Popped off OI-WL:   %i11 = load i32, i32* %a, align 4
Merged overdefined into   %sub = sub nsw i32 %i11, 100 : overdefined

Popped off OI-WL:   %sub = sub nsw i32 %i11, 100

Popped off I-WL:   %b.0 = phi i32 [ -11, %label_8 ], [ 13, %label_5 ], [ 90, %label_4 ]

Popped off I-WL:   %b.0 = phi i32 [ -11, %label_8 ], [ 13, %label_5 ], [ 90, %label_4 ]

Popped off I-WL:   %tau = call i32 (...) @llvm.tau.i32(i32 %e.0, i32 %add)

Popped off I-WL:   %b.0 = phi i32 [ -11, %label_8 ], [ 13, %label_5 ], [ 90, %label_4 ]

Popped off I-WL:   %e.0 = phi i32 [ 0, %label_8 ], [ 0, %label_5 ], [ %add, %label_4 ]

Popped off BBWL: 
if.else:                                          ; preds = %end
  %i11 = load i32, i32* %a, align 4
  %sub = sub nsw i32 %i11, 100
  store i32 %sub, i32* %a, align 4
  br label %if.end

Marking Block Executable: if.end

Popped off BBWL: 
if.end:                                           ; preds = %if.else, %if.then
  %tau5 = call i32 (...) @llvm.tau.i32(i32 %tau4, i32 %b.0)
  %tau3 = call i32 (...) @llvm.tau.i32(i32 %tau2, i32 %e.0)
  %i12 = load i32, i32* %a, align 4
  %add13 = add nsw i32 %add11, %i12
  ret i32 0

Merged overdefined into   %i12 = load i32, i32* %a, align 4 : overdefined
markOverdefined:   %add13 = add nsw i32 %add11, %i12

Popped off BBWL: 
if.then:                                          ; preds = %end
  %i10 = load i32, i32* %a, align 4
  %add12 = add nsw i32 %i10, 190
  store i32 %add12, i32* %a, align 4
  br label %if.end

Marking Edge Executable: if.then -> if.end
		Visiting Tau Instruction
		Speculative Operand : b.0, constantrange<-11, 91>
		Speculative Operand : llvm.tau.i32, constant<; Function Attrs: nofree nosync nounwind willreturn
declare i32 @llvm.tau.i32(...) #5
>
Merged overdefined into   %tau5 = call i32 (...) @llvm.tau.i32(i32 %tau4, i32 %b.0) : overdefined
		ValueLattice (TauState) : overdefined
		Visiting Tau Instruction
		Speculative Operand : e.0, overdefined
Merged overdefined into   %tau3 = call i32 (...) @llvm.tau.i32(i32 %tau2, i32 %e.0) : overdefined
		ValueLattice (TauState) : overdefined

Popped off OI-WL:   %tau3 = call i32 (...) @llvm.tau.i32(i32 %tau2, i32 %e.0)

Popped off OI-WL:   %tau5 = call i32 (...) @llvm.tau.i32(i32 %tau4, i32 %b.0)

Popped off OI-WL:   %add13 = add nsw i32 %add11, %i12

Popped off OI-WL:   %i12 = load i32, i32* %a, align 4
RESOLVING UNDEFs
===-------------------------------------------------------------------------===
                      ... Pass execution timing report ...
===-------------------------------------------------------------------------===
  Total Execution Time: 0.0249 seconds (0.0259 wall clock)

   ---User Time---   --System Time--   --User+System--   ---Wall Time---  --- Name ---
   0.0043 ( 69.6%)   0.0182 ( 97.2%)   0.0225 ( 90.4%)   0.0235 ( 90.7%)  SCCPTauPass
   0.0005 (  8.4%)   0.0005 (  2.8%)   0.0010 (  4.1%)   0.0010 (  4.0%)  PrintModulePass
   0.0006 (  9.9%)   0.0000 (  0.0%)   0.0006 (  2.5%)   0.0006 (  2.4%)  VerifierPass
   0.0006 (  9.2%)   0.0000 (  0.0%)   0.0006 (  2.3%)   0.0006 (  2.2%)  VerifierAnalysis
   0.0001 (  1.3%)   0.0000 (  0.0%)   0.0001 (  0.3%)   0.0001 (  0.3%)  PreservedCFGCheckerAnalysis
   0.0001 (  1.3%)   0.0000 (  0.0%)   0.0001 (  0.3%)   0.0001 (  0.3%)  DominatorTreeAnalysis
   0.0000 (  0.2%)   0.0000 (  0.0%)   0.0000 (  0.1%)   0.0000 (  0.1%)  TargetLibraryAnalysis
   0.0061 (100.0%)   0.0188 (100.0%)   0.0249 (100.0%)   0.0259 (100.0%)  Total

===-------------------------------------------------------------------------===
                                LLVM IR Parsing
===-------------------------------------------------------------------------===
  Total Execution Time: 0.0048 seconds (0.0050 wall clock)

   ---User Time---   --System Time--   --User+System--   ---Wall Time---  --- Name ---
   0.0045 (100.0%)   0.0003 (100.0%)   0.0048 (100.0%)   0.0050 (100.0%)  Parse IR
   0.0045 (100.0%)   0.0003 (100.0%)   0.0048 (100.0%)   0.0050 (100.0%)  Total

Writing '.main.dot'...
Writing '.main.dot'...
